{"version":3,"file":"js/457.js","mappings":"8JAQA,MAAMA,UAAe,IAKnBC,aAAY,SACVC,EAAW,IAAI,IAAU,OACzBC,EAAS,IACP,IACFC,MAAM,CAAEF,aACRC,EAAOE,KAAKC,GAAU,YAAkBA,KAAQC,SAASC,GAASC,KAAKC,IAAIF,KAM7EG,UACE,MAAO,CACLR,OAAQM,KAAKG,SAASP,KAAKQ,GAAUA,EAAMC,cAS/CC,UAAUC,EAAIC,GACZ,IAAI,MAAEC,EAAK,SAAEhB,GAAaO,KACtBU,EAAY,IAAI,IAAUH,EAAI,EAAG,YAAmB,aACpDI,EAAYX,KAAKY,gBAAgBL,EAAIC,GACrCK,EAAW,gBAAuBF,GAClCG,EAAW,gBAAuBJ,GAClCK,EAAS,GACTC,EAAS,GACTC,EAAc,CAChBC,KAAM,KACJ,IAAI,OAAEC,GAAWJ,EACjB,IAAK,IAAIK,EAAI,EAAGA,EAAID,EAAQC,IAAK,CAC/B,MAAMC,EAAON,EAAOK,GACpBX,EAAMa,OAAOD,GAEfZ,EAAMc,KAAKP,IAEbQ,KAAM,KACJT,EAAS,GACTC,EAASP,EAAMO,OAAOF,GACtB,IAAI,OAAEK,GAAWH,EACjB,IAAK,IAAII,EAAI,EAAGA,EAAID,EAAQC,IAAK,CAC/B,MAAMC,EAAOL,EAAOI,GACdK,EAAQ,IAAKJ,GAEnB,GADAZ,EAAMa,OAAOD,GACTI,EAAMC,KAAOb,EAASa,KAAM,CAC9B,GAAID,EAAME,KAAOd,EAASc,KAAM,CAC9B,IAAIC,EAAUH,EAAME,KAAOd,EAASa,KACpCE,GAAW,EACXH,EAAMI,OAASJ,EAAME,KACrBF,EAAME,MAAQC,EACdH,EAAMK,MAAQ,WACVL,EAAMM,OAASN,EAAMO,MAAQP,EAAME,OAASF,EAAMC,MACpDX,EAAOkB,KAAKR,GAEd,SAEF,GAAIA,EAAME,KAAOd,EAASc,KAAM,CAC9B,IAAIC,EAAUf,EAASc,KAAOb,EAASY,KACvCE,GAAW,EACXH,EAAMI,OAASJ,EAAME,KACrBF,EAAME,MAAQC,EACdH,EAAMK,MAAQ,WACVL,EAAMM,OAASN,EAAMO,MAAQP,EAAME,OAASF,EAAMC,MACpDX,EAAOkB,KAAKR,GAEd,SAEF,GAAIA,EAAME,OAASd,EAASc,KAAM,CAChC,IAAIC,EAAUf,EAASc,KAAOb,EAASY,KACvCE,GAAW,EACXH,EAAMI,OAASJ,EAAME,KACrBF,EAAME,MAAQC,EACdH,EAAMK,MAAQ,WACVL,EAAMM,OAASN,EAAMO,MAAQP,EAAME,OAASF,EAAMC,MACpDX,EAAOkB,KAAKR,GAEd,UAGJ,GAAIA,EAAMC,KAAOb,EAASa,KAAM,CAC9B,GAAID,EAAMC,KAAOb,EAASc,MACpBF,EAAME,KAAOd,EAASc,KAAM,CAC9B,IAAIO,EAAUT,EAAMC,KAAOb,EAASa,KAChCE,EAAUf,EAASc,KAAOF,EAAMC,KACpCE,GAAWM,EAAU,EACrBT,EAAMI,OAASJ,EAAME,KACrBF,EAAMU,OAASV,EAAMC,KACrBD,EAAME,MAAQC,EACdH,EAAMC,MAAQQ,EACdT,EAAMK,MAAQ,YACVL,EAAMM,OAASN,EAAMO,MAAQP,EAAME,OAASF,EAAMC,MACpDX,EAAOkB,KAAKR,GAEd,SAGJ,GAAIA,EAAMC,KAAOb,EAASc,KAAM,CAC9B,IAAIS,EAAYvB,EAASc,KAAOd,EAASa,KACzCU,GAAa,EACbX,EAAMI,OAASJ,EAAME,KACrBF,EAAMU,OAASV,EAAMC,KACrBD,EAAME,MAAQS,EACdX,EAAMC,MAAQU,EACdX,EAAMK,MAAQ,YACVL,EAAMM,OAASN,EAAMO,MAAQP,EAAME,OAASF,EAAMC,MACpDX,EAAOkB,KAAKR,GAEd,UAGJ,GAAIA,EAAMC,OAASb,EAASa,MACtBD,EAAME,KAAOd,EAASc,KAAM,CAC9B,IAAIC,EAAUf,EAASc,KAAOF,EAAMC,KACpCE,GAAW,EACXH,EAAMI,OAASJ,EAAME,KACrBF,EAAME,MAAQC,EACdH,EAAMK,MAAQ,WACVL,EAAMM,OAASN,EAAMO,MAAQP,EAAME,OAASF,EAAMC,MACpDX,EAAOkB,KAAKR,IAKpBhB,EAAMc,KAAKR,KAGftB,EAAS4C,UAAUpB,GACnBA,EAAYO,OAQdc,UAAUC,EAAI/B,GACZ,IAAI,MAAEC,EAAK,SAAEhB,GAAaO,KACtBU,EAAY,IAAI,IAAU,EAAG6B,EAAI,YAAmB,aACpD5B,EAAYX,KAAKwC,gBAAgBD,EAAI/B,GACrCK,EAAW,gBAAuBF,GAClCG,EAAW,gBAAuBJ,GAClCK,EAAS,GACTC,EAAS,GACTC,EAAc,CAChBC,KAAM,KACJ,IAAI,OAAEC,GAAWJ,EACjB,IAAK,IAAIK,EAAI,EAAGA,EAAID,EAAQC,IAAK,CAC/B,MAAMC,EAAON,EAAOK,GACpBX,EAAMa,OAAOD,GAEfZ,EAAMc,KAAKP,IAEbQ,KAAM,KACJT,EAAS,GACTC,EAASP,EAAMO,OAAOF,GACtB,IAAI,OAAEK,GAAWH,EACjB,IAAK,IAAII,EAAI,EAAGA,EAAID,EAAQC,IAAK,CAC/B,MAAMC,EAAOL,EAAOI,GACdK,EAAQ,IAAKJ,GAEnB,GADAZ,EAAMa,OAAOD,GACTI,EAAMO,KAAOnB,EAASmB,KAAM,CAC9B,GAAIP,EAAMM,KAAOlB,EAASkB,KAAM,CAC9B,IAAIH,EAAUH,EAAMM,KAAOlB,EAASmB,KACpCJ,GAAW,EACXH,EAAMI,OAASJ,EAAMM,KACrBN,EAAMM,MAAQH,EACdH,EAAMK,MAAQ,WACVL,EAAMM,OAASN,EAAMO,MAAQP,EAAME,OAASF,EAAMC,MACpDX,EAAOkB,KAAKR,GAEd,SAEF,GAAIA,EAAMM,KAAOlB,EAASkB,KAAM,CAC9B,IAAIH,EAAUf,EAASkB,KAAOjB,EAASkB,KACvCJ,GAAW,EACXH,EAAMI,OAASJ,EAAMM,KACrBN,EAAMM,MAAQH,EACdH,EAAMK,MAAQ,WACVL,EAAMM,OAASN,EAAMO,MAAQP,EAAME,OAASF,EAAMC,MACpDX,EAAOkB,KAAKR,GAEd,SAEF,GAAIA,EAAMM,OAASlB,EAASkB,KAAM,CAChC,IAAIH,EAAUf,EAASkB,KAAOjB,EAASkB,KACvCJ,GAAW,EACXH,EAAMI,OAASJ,EAAMM,KACrBN,EAAMM,MAAQH,EACdH,EAAMK,MAAQ,WACVL,EAAMM,OAASN,EAAMO,MAAQP,EAAME,OAASF,EAAMC,MACpDX,EAAOkB,KAAKR,GAEd,UAGJ,GAAIA,EAAMO,KAAOnB,EAASmB,KAAM,CAC9B,GAAIP,EAAMO,KAAOnB,EAASkB,MACpBN,EAAMM,KAAOlB,EAASkB,KAAM,CAC9B,IAAIG,EAAUT,EAAMO,KAAOnB,EAASmB,KAChCJ,EAAUf,EAASkB,KAAON,EAAMO,KACpCJ,GAAWM,EAAU,EACrBT,EAAMI,OAASJ,EAAMM,KACrBN,EAAMU,OAASV,EAAMO,KACrBP,EAAMM,MAAQH,EACdH,EAAMO,MAAQE,EACdT,EAAMK,MAAQ,YACVL,EAAMM,OAASN,EAAMO,MAAQP,EAAME,OAASF,EAAMC,MACpDX,EAAOkB,KAAKR,GAEd,SAGJ,GAAIA,EAAMO,KAAOnB,EAASkB,KAAM,CAC9B,IAAIK,EAAYvB,EAASkB,KAAOlB,EAASmB,KACzCI,GAAa,EACbX,EAAMI,OAASJ,EAAMM,KACrBN,EAAMU,OAASV,EAAMO,KACrBP,EAAMM,MAAQK,EACdX,EAAMO,MAAQI,EACdX,EAAMK,MAAQ,YACVL,EAAMM,OAASN,EAAMO,MAAQP,EAAME,OAASF,EAAMC,MACpDX,EAAOkB,KAAKR,GAEd,UAGJ,GAAIA,EAAMO,OAASnB,EAASmB,MACtBP,EAAMM,KAAOlB,EAASkB,KAAM,CAC9B,IAAIH,EAAUf,EAASkB,KAAON,EAAMO,KACpCJ,GAAW,EACXH,EAAMI,OAASJ,EAAMM,KACrBN,EAAMM,MAAQH,EACdH,EAAMK,MAAQ,WACVL,EAAMM,OAASN,EAAMO,MAAQP,EAAME,OAASF,EAAMC,MACpDX,EAAOkB,KAAKR,IAKpBhB,EAAMc,KAAKR,KAGftB,EAAS4C,UAAUpB,GACnBA,EAAYO,OAQdiB,eAAeF,EAAI/B,GACjB,MAAM,SAAEf,GAAaO,KACfiB,EAAc,CAClBC,KAAM,KACJlB,KAAK0C,eAAeH,EAAI/B,IAE1BgB,KAAM,KACJxB,KAAK2C,eAAeJ,EAAI/B,KAG5Bf,EAAS4C,UAAUpB,GACnBA,EAAYO,OAQdoB,gBAAgBL,EAAI/B,GAClB,MAAM,SAAEf,GAAaO,KACfiB,EAAc,CAClBC,KAAM,KACJlB,KAAK6C,gBAAgBN,EAAI/B,IAE3BgB,KAAM,KACJxB,KAAK8C,gBAAgBP,EAAI/B,KAG7Bf,EAAS4C,UAAUpB,GACnBA,EAAYO,OAQduB,eAAexC,EAAIC,GACjB,MAAM,SAAEf,GAAaO,KACfiB,EAAc,CAClBC,KAAM,KACJlB,KAAKgD,eAAezC,EAAIC,IAE1BgB,KAAM,KACJxB,KAAKiD,eAAe1C,EAAIC,KAG5Bf,EAAS4C,UAAUpB,GACnBA,EAAYO,OAQd0B,gBAAgB3C,EAAIC,GAClB,MAAM,SAAEf,GAAaO,KACfiB,EAAc,CAClBC,KAAM,KACJlB,KAAKmD,gBAAgB5C,EAAIC,IAE3BgB,KAAM,KACJxB,KAAKoD,gBAAgB7C,EAAIC,KAG7Bf,EAAS4C,UAAUpB,GACnBA,EAAYO,U,8CC1UhB,MAAM6B,EAKJ7D,cAEEQ,KAAKsD,UAAY,GAEjBtD,KAAKuD,UAAY,GAEjBvD,KAAKwD,MAAQ,CACXC,MAAO,GACPC,KAAM,IAGR1D,KAAK2D,OAAQ,EAEb3D,KAAK4D,OAAS,IAAI,IAMpB1C,OACE,MAAMsC,EAAQxD,KAAKsD,UAAUO,MAC7B,IAAK,IAAIzC,EAAIoC,EAAME,KAAKvC,OAAS,EAAGC,GAAK,EAAGA,IAAK,CAChCoC,EAAME,KAAKtC,GACnBF,OAETlB,KAAKuD,UAAUtB,KAAKuB,GACpBxD,KAAK4D,OAAOE,QAAQ,SAAUN,EAAMC,MAAO,QAM7CjC,OACE,MAAMgC,EAAQxD,KAAKuD,UAAUM,MAC7B,IAAK,IAAIzC,EAAI,EAAG2C,EAAMP,EAAME,KAAKvC,OAAQC,EAAI2C,EAAK3C,IAAK,CACtCoC,EAAME,KAAKtC,GACnBI,OAETxB,KAAKsD,UAAUrB,KAAKuB,GACpBxD,KAAK4D,OAAOE,QAAQ,SAAUN,EAAMC,MAAO,QAM7CO,OACEhE,KAAKwD,MAAQ,CACXC,MAAO,GACPC,KAAM,IAER1D,KAAK2D,OAAQ,EAOfM,UACE,OAAOjE,KAAKuD,UAAUpC,OAAS,EAOjC+C,UACE,OAAOlE,KAAKsD,UAAUnC,OAAS,EAMjCgD,MAAMV,GACAzD,KAAKwD,MAAME,KAAKvC,SAClBnB,KAAKwD,MAAMC,MAAQA,EACnBzD,KAAKuD,UAAY,GACjBvD,KAAKsD,UAAUrB,KAAKjC,KAAKwD,QAE3BxD,KAAKwD,MAAQ,CACXC,MAAO,GACPC,KAAM,IAER1D,KAAK2D,OAAQ,EACb3D,KAAK4D,OAAOE,QAAQ,SAAUL,EAAO,SAOvCpB,UAAU+B,EAAS,CACjBlD,KAAM,OACNM,KAAM,SAEFxB,KAAK2D,OACP3D,KAAKwD,MAAME,KAAKzB,KAAKmC,M,gGC/F3B,MAAMC,EAKJ7E,aAAY,SACVC,EAAW,IAAI,MAEfO,KAAKP,SAAWA,EAChBO,KAAKS,MAAQ,IAAI,IACjBT,KAAK4D,OAAS,IAAI,IAQpBU,gBAAgB/D,EAAIgC,GAClB,IAAI,MAAE9B,GAAUT,KACZuE,EAAO,CACTvC,KAAMO,EACNb,KAAMnB,EACNwB,KAAMQ,EACNZ,KAAMpB,GAEJiE,EAAO/D,EAAMgE,MAAMF,GACvB,OAAIC,EACK,gBAAuBA,GAEzB,UAQTE,iBAAiBnE,EAAIgC,GACnB,MAAMiC,EAAOxE,KAAKsE,gBAAgB/D,EAAIgC,GACtC,OAAIiC,EAAKG,MAAQpE,GACXiE,EAAKI,MAAQrC,EACRiC,EAGJ,UAOTK,cAAcC,GACZ,IAAI,MAAErE,GAAUT,KACZuE,EAAO,gBAAuBO,GAElC,OADcrE,EAAMO,OAAOuD,GACd3E,KAAK2E,GAAS,gBAAuBA,KAOpDtC,KAAK6C,GACH,IAAI,MAAErE,GAAUT,KACZuE,EAAO,gBAAuBO,GAElC,OADArE,EAAMsE,OAAOR,GACNvE,KAOTgF,MAAMF,GACJ,IAAI,MAAErE,GAAUT,KACZuE,EAAO,gBAAuBO,GAC9BG,EAAQxE,EAAMO,OAAOuD,GACzB,IAAK,IAAInD,EAAI,EAAG2C,EAAMkB,EAAM9D,OAAQC,EAAI2C,EAAK3C,IAAK,CAChD,IAAIC,EAAO4D,EAAM7D,GACjBX,EAAMa,OAAOD,GAEf,OAAOrB,KAOTC,IAAI6E,GACF,IAAI,OAAElB,EAAM,SAAEnE,GAAaO,KACvBoE,EAAS,CACXlD,KAAM,KACJlB,KAAKgF,MAAMF,IAEbtD,KAAM,KACJxB,KAAKiC,KAAK6C,GACVlB,EAAOE,QAAQ,MAAOgB,KAG1BrF,EAAS4C,UAAU+B,GACnBA,EAAO5C,OAOT0D,OAAOJ,GACL,IAAI,OAAElB,EAAM,SAAEnE,GAAaO,KACvBoE,EAAS,CACXlD,KAAM,KACJlB,KAAKiC,KAAK6C,IAEZtD,KAAM,KACJxB,KAAKgF,MAAMF,GACXlB,EAAOE,QAAQ,SAAUgB,KAG7BrF,EAAS4C,UAAU+B,GACnBA,EAAO5C,OAOT2D,YAAYC,GACV,IAAI,OAAExB,EAAM,SAAEnE,GAAaO,KACvBoE,EAAS,CACXlD,KAAM,KACJkE,EAAWtF,SAASgF,IAClB9E,KAAKiC,KAAK6C,OAGdtD,KAAM,KACJ4D,EAAWtF,SAASgF,IAClB9E,KAAKgF,MAAMF,MAEblB,EAAOE,QAAQ,cAAesB,KAGlC3F,EAAS4C,UAAU+B,GACnBA,EAAO5C,OAMTrB,SACE,IAAI,MAAEM,GAAUT,KAChB,OAAOS,EAAM4E,MAAMzF,KAAK2E,GAAS,gBAAuBA,KAO1De,MAAMR,GACJ,IAAI,MAAErE,GAAUT,KACZuE,EAAO,gBAAuBO,GAC9BG,EAAQxE,EAAMO,OAAOuD,GACzB,GAAqB,IAAjBU,EAAM9D,OACR,OAAO2D,EAET,IAAIrD,EAAQqD,EAAUrD,QACtB,IAAK,IAAIL,EAAI,EAAG2C,EAAMkB,EAAM9D,OAAQC,EAAI2C,EAAK3C,IAAK,CAChD,IAAIhB,EAAQ,gBAAuB6E,EAAM7D,IACzCK,EAAQA,EAAM6D,MAAMlF,GAEtB,OAAKqB,EAAM8D,OAAOT,GAGXA,EAFE9E,KAAKsF,MAAM7D,GAWtBb,gBAAgBL,EAAIC,GAClB,OAAO,IAAI,IAAUD,EAAI,EAAGiF,KAAKC,IAAIlF,EAAIA,EAAKC,EAAS,GAAI6D,EAAUqB,SASvElD,gBAAgBD,EAAI/B,GAClB,OAAO,IAAI,IAAU,EAAG+B,EAAI8B,EAAUsB,QAASH,KAAKC,IAAIlD,EAAIA,EAAK/B,EAAS,IAQ5EyC,eAAe1C,EAAIC,GACjB,IAAI+D,EAAO,CACTvC,KAAM,EACNN,KAAMnB,EACNwB,KAAMsC,EAAUqB,QAChB/D,KAAM0C,EAAUsB,UAEd,MAAElF,GAAUT,KACZiF,EAAQxE,EAAMO,OAAOuD,GACzB,IAAK,IAAInD,EAAI,EAAG2C,EAAMkB,EAAM9D,OAAQC,EAAI2C,EAAK3C,IAAK,CAChD,IAAIC,EAAO4D,EAAM7D,GACjBX,EAAMa,OAAOD,GACTA,EAAKK,KAAOnB,IACdc,EAAKK,MAAQlB,GAEXa,EAAKM,KAAOpB,IACdc,EAAKM,MAAQnB,GAGjBC,EAAMc,KAAK0D,GAQbtC,eAAeJ,EAAI/B,GACjB,MAAM+D,EAAO,CACXvC,KAAMO,EACNb,KAAM,EACNK,KAAMsC,EAAUqB,QAChB/D,KAAM0C,EAAUsB,SAElB,IAAI,MAAElF,GAAUT,KACZiF,EAAQxE,EAAMO,OAAOuD,GACzB,IAAK,IAAInD,EAAI,EAAG2C,EAAMkB,EAAM9D,OAAQC,EAAI2C,EAAK3C,IAAK,CAChD,IAAIC,EAAO4D,EAAM7D,GACjBX,EAAMa,OAAOD,GACTA,EAAKW,KAAOO,IACdlB,EAAKW,MAAQxB,GAEXa,EAAKU,KAAOQ,IACdlB,EAAKU,MAAQvB,GAGjBC,EAAMc,KAAK0D,GAQbjC,eAAezC,EAAIC,GACjB,IAAI+D,EAAO,CACTvC,KAAM,EACNN,KAAMnB,EACNwB,KAAMsC,EAAUqB,QAChB/D,KAAM0C,EAAUsB,UAEd,MAAElF,GAAUT,KACZiF,EAAQxE,EAAMO,OAAOuD,GACzB,IAAK,IAAInD,EAAI,EAAG2C,EAAMkB,EAAM9D,OAAQC,EAAI2C,EAAK3C,IAAK,CAChD,IAAIC,EAAO4D,EAAM7D,GACjBX,EAAMa,OAAOD,GACTA,EAAKK,KAAOnB,IACdc,EAAKK,MAAQlB,GAEXa,EAAKM,KAAOpB,IACdc,EAAKM,MAAQnB,GAGjBC,EAAMc,KAAK0D,GAQbvC,eAAeH,EAAI/B,GACjB,MAAM+D,EAAO,CACXvC,KAAMO,EACNb,KAAM,EACNK,KAAMsC,EAAUqB,QAChB/D,KAAM0C,EAAUsB,SAElB,IAAI,MAAElF,GAAUT,KACZiF,EAAQxE,EAAMO,OAAOuD,GACzB,IAAK,IAAInD,EAAI,EAAG2C,EAAMkB,EAAM9D,OAAQC,EAAI2C,EAAK3C,IAAK,CAChD,IAAIC,EAAO4D,EAAM7D,GACjBX,EAAMa,OAAOD,GACTA,EAAKW,KAAOO,IACdlB,EAAKW,MAAQxB,GAEXa,EAAKU,KAAOQ,IACdlB,EAAKU,MAAQvB,GAGjBC,EAAMc,KAAK0D,GAQb7B,gBAAgB7C,EAAIC,GAClB,IAAI+D,EAAO,CACTvC,KAAM,EACNN,KAAMnB,EACNwB,KAAMsC,EAAUqB,QAChB/D,KAAM0C,EAAUsB,UAEd,MAAElF,GAAUT,KACZiF,EAAQxE,EAAMO,OAAOuD,GACzB,IAAK,IAAInD,EAAI,EAAG2C,EAAMkB,EAAM9D,OAAQC,EAAI2C,EAAK3C,IAAK,CAChD,IAAIC,EAAO4D,EAAM7D,GACjBX,EAAMa,OAAOD,GACTA,EAAKK,MAAQnB,IACfc,EAAKK,MAAQlB,GAEXa,EAAKM,MAAQpB,IACfc,EAAKM,MAAQnB,GAGjBC,EAAMc,KAAK0D,GAQbnC,gBAAgBP,EAAI/B,GAClB,MAAM+D,EAAO,CACXvC,KAAMO,EACNb,KAAM,EACNK,KAAMsC,EAAUqB,QAChB/D,KAAM0C,EAAUsB,SAElB,IAAI,MAAElF,GAAUT,KACZiF,EAAQxE,EAAMO,OAAOuD,GACzB,IAAK,IAAInD,EAAI,EAAG2C,EAAMkB,EAAM9D,OAAQC,EAAI2C,EAAK3C,IAAK,CAChD,IAAIC,EAAO4D,EAAM7D,GACjBX,EAAMa,OAAOD,GACTA,EAAKW,MAAQO,IACflB,EAAKW,MAAQxB,GAEXa,EAAKU,MAAQQ,IACflB,EAAKU,MAAQvB,GAGjBC,EAAMc,KAAK0D,GAQb9B,gBAAgB5C,EAAIC,GAClB,IAAI+D,EAAO,CACTvC,KAAM,EACNN,KAAMnB,EACNwB,KAAMsC,EAAUqB,QAChB/D,KAAM0C,EAAUsB,UAEd,MAAElF,GAAUT,KACZiF,EAAQxE,EAAMO,OAAOuD,GACzB,IAAK,IAAInD,EAAI,EAAG2C,EAAMkB,EAAM9D,OAAQC,EAAI2C,EAAK3C,IAAK,CAChD,IAAIC,EAAO4D,EAAM7D,GACjBX,EAAMa,OAAOD,GACTA,EAAKK,MAAQnB,IACfc,EAAKK,MAAQlB,GAEXa,EAAKM,MAAQpB,IACfc,EAAKM,MAAQnB,GAGjBC,EAAMc,KAAK0D,GAQbpC,gBAAgBN,EAAI/B,GAClB,MAAM+D,EAAO,CACXvC,KAAMO,EACNb,KAAM,EACNK,KAAMsC,EAAUqB,QAChB/D,KAAM0C,EAAUsB,SAElB,IAAI,MAAElF,GAAUT,KACZiF,EAAQxE,EAAMO,OAAOuD,GACzB,IAAK,IAAInD,EAAI,EAAG2C,EAAMkB,EAAM9D,OAAQC,EAAI2C,EAAK3C,IAAK,CAChD,IAAIC,EAAO4D,EAAM7D,GACjBX,EAAMa,OAAOD,GACTA,EAAKW,MAAQO,IACflB,EAAKW,MAAQxB,GAEXa,EAAKU,MAAQQ,IACflB,EAAKU,MAAQvB,GAGjBC,EAAMc,KAAK0D,IAIfZ,EAAUqB,QAAU,KACpBrB,EAAUsB,QAAU,S,8CCtapB,MAAMC,EAWJpG,YAAYmF,EAAKC,EAAKiB,EAAKC,EAAKC,EAAI,EAAGC,EAAI,GACzChG,KAAK2E,IAAMA,EACX3E,KAAK4E,IAAMA,EACX5E,KAAK6F,IAAMA,EACX7F,KAAK8F,IAAMA,EACX9F,KAAK+F,EAAIA,EACT/F,KAAKgG,EAAIA,EASXC,KAAKC,EAAiBC,EAAIC,EAAY,MAAM,IAC1C,MAAM,IACJzB,EAAG,IAAEC,EAAG,IAAEiB,EAAG,IAAEC,GACb9F,KACJ,IAAIqG,GAAM,EACVH,EAAgBI,iBACbC,SAAS5B,GACT6B,OAAOX,GACPY,SAASrF,IACJgF,EAAUhF,IACZ8E,EAAgBQ,iBACbH,SAAS3B,GACT4B,OAAOV,GACPW,SAASE,IACRN,EAAMF,EAAG/E,EAAGuF,GACLN,KAERvC,UAEEuC,KAERvC,UAUL8C,IAAIjC,EAAKC,EAAKiB,EAAKC,GACjB9F,KAAK2E,IAAMA,EACX3E,KAAK4E,IAAMA,EACX5E,KAAK6F,IAAMA,EACX7F,KAAK8F,IAAMA,EAObe,WACE,OAAO7G,KAAK6F,IAAM7F,KAAK2E,IAAM,GAAK3E,KAAK8F,IAAM9F,KAAK4E,IAAM,EAS1DkC,YAAYC,GACV,IAAKxG,EAAIgC,GAAM,CAAC,EAAG,GACC,IAAhBwE,EAAK5F,QACNoB,EAAIhC,GAAM,YAAmBwG,EAAK,IACV,IAAhBA,EAAK5F,UACbZ,EAAIgC,GAAMwE,GAEb,MAAM,IACJpC,EAAG,IAAEC,EAAG,IAAEiB,EAAG,IAAEC,GACb9F,KACJ,OAAO2E,GAAOpE,GAAMA,GAAMsF,GAAOjB,GAAOrC,GAAMA,GAAMuD,EAQtDkB,SAASC,GACP,OAAOjH,KAAK2E,KAAOsC,EAAMtC,KACpB3E,KAAK4E,KAAOqC,EAAMrC,KAClB5E,KAAK6F,KAAOoB,EAAMpB,KAClB7F,KAAK8F,KAAOmB,EAAMnB,IAQzBoB,OAAOD,GACL,OAAOjH,KAAK2E,KAAOsC,EAAMtC,KACpB3E,KAAK4E,KAAOqC,EAAMrC,KAClB5E,KAAK6F,KAAOoB,EAAMpB,KAClB7F,KAAK8F,KAAOmB,EAAMnB,IAQzBqB,SAASF,GACP,OAAOjH,KAAK2E,IAAMsC,EAAMpB,KACnB7F,KAAK4E,IAAMqC,EAAMnB,KACjBmB,EAAMtC,IAAM3E,KAAK6F,KACjBoB,EAAMrC,IAAM5E,KAAK8F,IAQxBsB,WAAWH,GACT,OAAOjH,KAAK2E,KAAOsC,EAAMpB,KACpB7F,KAAK4E,KAAOqC,EAAMnB,KAClBmB,EAAMtC,KAAO3E,KAAK6F,KAClBoB,EAAMrC,KAAO5E,KAAK8F,IAQzBR,MAAM2B,GACJ,MAAM,IACJtC,EAAG,IAAEC,EAAG,IAAEiB,EAAG,IAAEC,GACb9F,KACJ,OAAO,IAAI4F,EACTqB,EAAMtC,IAAMA,EAAMsC,EAAMtC,IAAMA,EAC9BsC,EAAMrC,IAAMA,EAAMqC,EAAMrC,IAAMA,EAC9BqC,EAAMpB,IAAMA,EAAMoB,EAAMpB,IAAMA,EAC9BoB,EAAMnB,IAAMA,EAAMmB,EAAMnB,IAAMA,GASlCuB,SAASJ,GACP,MAAM,IACJtC,EAAG,IAAEC,EAAG,IAAEiB,EAAG,IAAEC,GACb9F,KACJ,OAAIA,KAAKmH,SAASF,GACTrB,EAAU0B,MAEZ,IAAI1B,EACTqB,EAAMtC,IAAMA,EAAMsC,EAAMtC,IAAMA,EAC9BsC,EAAMrC,IAAMA,EAAMqC,EAAMrC,IAAMA,EAC9BqC,EAAMpB,IAAMA,EAAMoB,EAAMpB,IAAMA,EAC9BoB,EAAMnB,IAAMA,EAAMmB,EAAMnB,IAAMA,GAUlCyB,mBAAmBN,GACjB,OAAIjH,KAAKqH,SAASJ,GAAO1B,OAAOK,EAAU0B,OACjC,GAEFtH,KAAKwH,WAAWP,GAQzBO,WAAWP,GACT,MAAMZ,EAAM,GACNoB,EAAS,CAAC9C,EAAKC,EAAKiB,EAAKC,KAC7BO,EAAIpE,KAAK,IAAI2D,EAAUjB,EAAKC,EAAKiB,EAAKC,MAElC,IAAEnB,EAAG,IAAEC,EAAG,IAAEiB,EAAG,IAAEC,GAAQ9F,KACzB0H,EAAMT,EAAMtC,IAAMA,EAClBgD,EAAMV,EAAMrC,IAAMA,EAClBgD,EAAM/B,EAAMoB,EAAMpB,IAClBgC,EAAM/B,EAAMmB,EAAMnB,IAuDxB,OAtDI4B,EAAM,GACRD,EAAO9C,EAAKC,EAAKqC,EAAMtC,IAAM,EAAGmB,GAC5B8B,EAAM,GACRH,EAAOR,EAAMpB,IAAM,EAAGjB,EAAKiB,EAAKC,GAC5B6B,EAAM,GACRF,EAAOR,EAAMtC,IAAKC,EAAKqC,EAAMpB,IAAKoB,EAAMrC,IAAM,GAE5CiD,EAAM,GACRJ,EAAOR,EAAMtC,IAAKsC,EAAMnB,IAAM,EAAGmB,EAAMpB,IAAKC,KAG1C6B,EAAM,GACRF,EAAOR,EAAMtC,IAAKC,EAAKiB,EAAKoB,EAAMrC,IAAM,GAEtCiD,EAAM,GACRJ,EAAOR,EAAMtC,IAAKsC,EAAMnB,IAAM,EAAGD,EAAKC,KAGjC8B,EAAM,IACfH,EAAOR,EAAMpB,IAAM,EAAGjB,EAAKiB,EAAKC,GAC5B6B,EAAM,GACRF,EAAO9C,EAAKC,EAAKqC,EAAMpB,IAAKoB,EAAMrC,IAAM,GAEtCiD,EAAM,GACRJ,EAAO9C,EAAKsC,EAAMnB,IAAM,EAAGmB,EAAMpB,IAAKC,IAGtC6B,EAAM,GACRF,EAAO9C,EAAKC,EAAKiB,EAAKoB,EAAMrC,IAAM,GAC9BiD,EAAM,GACRJ,EAAO9C,EAAKsC,EAAMpB,IAAM,EAAGA,EAAKC,GAC5B4B,EAAM,GACRD,EAAO9C,EAAKsC,EAAMrC,IAAKqC,EAAMtC,IAAM,EAAGsC,EAAMnB,KAE1C8B,EAAM,GACRH,EAAOR,EAAMtC,IAAM,EAAGsC,EAAMrC,IAAKiB,EAAKoB,EAAMnB,OAG1C4B,EAAM,GACRD,EAAO9C,EAAKsC,EAAMrC,IAAKqC,EAAMtC,IAAM,EAAGmB,GAEpC8B,EAAM,GACRH,EAAOR,EAAMtC,IAAM,EAAGsC,EAAMrC,IAAKiB,EAAKC,KAGjC+B,EAAM,IACfJ,EAAO9C,EAAKsC,EAAMnB,IAAM,EAAGD,EAAKC,GAC5B4B,EAAM,GACRD,EAAO9C,EAAKC,EAAKqC,EAAMtC,IAAM,EAAGsC,EAAMnB,KAEpC8B,EAAM,GACRH,EAAOR,EAAMpB,IAAM,EAAGjB,EAAKiB,EAAKoB,EAAMnB,MAGnCO,EAOTyB,OACE,MAAO,CACL9H,KAAK6F,IAAM7F,KAAK2E,IAAM,EACtB3E,KAAK8F,IAAM9F,KAAK4E,IAAM,GAQ1BmD,QACE,MAAM,IAAEpD,EAAG,IAAEkB,EAAG,IAAEjB,EAAG,IAAEkB,GAAQ9F,KACzBgI,EAAM,IAAIpC,EAAUjB,EAAKC,EAAKD,EAAKmB,GACnCmC,EAAS,IAAIrC,EAAUC,EAAKjB,EAAKiB,EAAKC,GAG5C,MAAO,CAAEkC,MAAKE,MAFA,IAAItC,EAAUjB,EAAKmB,EAAKD,EAAKC,GAEtBmC,SAAQE,KADhB,IAAIvC,EAAUjB,EAAKC,EAAKiB,EAAKjB,IAQ5CwD,QACE,MAAM,IAAEzD,EAAG,IAAEkB,EAAG,IAAEjB,EAAG,IAAEkB,GAAQ9F,KAK/B,MAAO,CAAEqI,GAJE,IAAIzC,EAAUjB,EAAKC,EAAKD,EAAKC,GAI3B0D,GAHF,IAAI1C,EAAUjB,EAAKmB,EAAKnB,EAAKmB,GAGvByC,GAFN,IAAI3C,EAAUC,EAAKjB,EAAKiB,EAAKjB,GAEnB4D,GADV,IAAI5C,EAAUC,EAAKC,EAAKD,EAAKC,IAS1CP,OAAO0B,GACL,OAAOjH,KAAK6F,MAAQoB,EAAMpB,KACrB7F,KAAK8F,MAAQmB,EAAMnB,KACnB9F,KAAK2E,MAAQsC,EAAMtC,KACnB3E,KAAK4E,MAAQqC,EAAMrC,IAO1BnD,QACE,MAAM,IACJkD,EAAG,IAAEC,EAAG,IAAEiB,EAAG,IAAEC,EAAG,EAAEC,EAAC,EAAEC,GACrBhG,KACJ,OAAO,IAAI4F,EAAUjB,EAAKC,EAAKiB,EAAKC,EAAKC,EAAGC,GAG9C3F,WACE,MAAM,IACJsE,EAAG,IAAEC,EAAG,IAAEiB,EAAG,IAAEC,GACb9F,KACJ,IAAIyI,EAAM,YAAmB7D,EAAKD,GAIlC,OAHI3E,KAAK6G,aACP4B,EAAM,GAAGA,KAAO,YAAmB3C,EAAKD,MAEnC4C,EAQTC,eAAeD,GACb,MAAME,EAAOF,EAAIG,MAAM,MAChBhE,EAAKD,GAAO,YAAmBgE,EAAK,IAC3C,IAAK9C,EAAKC,GAAO,CAACnB,EAAKC,GAIvB,OAHI+D,EAAKxH,OAAS,KACf2E,EAAKD,GAAO,YAAmB8C,EAAK,KAEhC,IAAI/C,EAAUjB,EAAKC,EAAKiB,EAAKC,IAIxCF,EAAU0B,MAAQ,IAAI1B,GAAW,GAAI,GAAI,GAAI,I,sFC/N7C,MAAMiD,UAzHN,MAEErJ,aAAY,KAAEkE,EAAO,KACnB1D,KAAK0D,KAAOA,EAGdoF,SAASvI,GACP,IAAI,KAAEmD,GAAS1D,KACf,OAAO0D,EAAKnD,GAGdwI,MAAMjE,GAAW,aAAEkE,GAAe,GAAU,IAC1C,IAAI,IAAErE,EAAG,IAAEkB,GAAQf,GACf,IAAEF,EAAG,IAAEkB,GAAQhB,GACf,KAAEpB,GAAS1D,MACX,SAAEP,GAAaO,MACf,OAAEmB,GAAWuC,EACbuF,EAAW,GACXC,EAAcrD,EAAMlB,EAAM,EAC1BwE,EAAcrD,EAAMlB,EAAM,EAC1BR,EAAS,CACXlD,KAAM,KACJ,IAAK,IAAIX,EAAKoE,EAAKpE,GAAMsF,KACnBtF,GAAMY,GADkBZ,IAAM,CAIlC,IAAI6I,EAAaH,EAAS1I,GACtB8I,EAAU3F,EAAKnD,GACnB,GAAI8I,EACF,IAAK,IAAI9G,EAAKqC,EAAKrC,GAAMuD,KACnBvD,GAAMpB,GADkBoB,IAI5B,GAAIyG,EAAc,CAChB,IACIM,EAAU/G,IAAOqC,EACrB,GAFcrE,IAAOoE,GAEN2E,EACb,SAEFD,EAAQ9G,GAAM6G,EAAW7G,QAEzB8G,EAAQ9G,GAAM6G,EAAW7G,KAMnCf,KAAM,KACJyH,EAAW,IAAIM,MAAML,GACrB,IAAK,IAAI3I,EAAKoE,EAAKpE,GAAMsF,KACnBtF,GAAMY,GADkBZ,IAAM,CAIlC,IAAI8I,EAAU3F,EAAKnD,GACnB,GAAI8I,EAAS,CACX,IAAID,EAAa,IAAIG,MAAMJ,IACvB,OAAEhI,GAAWkI,EACjB,IAAK,IAAI9G,EAAKqC,EAAKrC,GAAMuD,KACnBvD,GAAMpB,GADkBoB,IAI5B,GAAIyG,EAAc,CAChB,IACIM,EAAU/G,IAAOqC,EACrB,GAFcrE,IAAOoE,GAEN2E,EACb,SAEFF,EAAW7G,GAAM8G,EAAQ9G,GACzB8G,EAAQ9G,QAAMiH,OAEdJ,EAAW7G,GAAM8G,EAAQ9G,GACzB8G,EAAQ9G,QAAMiH,EAGlBP,EAAS1I,GAAM6I,MAKvB3J,EAAS4C,UAAU+B,GACnBA,EAAO5C,OAGTwD,QACE,OAAOhF,KAAK0D,KAAKsB,QAGnByE,MAAM9E,EAAKC,EAAKiB,EAAKC,GAEnB,OADa9F,KAAK0D,KAAK+F,MAAM9E,EAAKkB,EAAM,GAC5BjG,KAAK8J,GACXA,EACKA,EAAID,MAAM7E,EAAKkB,EAAM,GAEvB4D,IAIXxJ,UACE,OAAOF,KAAK0D,KAGdiG,YACE,OAAO3J,KAAK0D,KAAKvC,OAGnByI,SAASrJ,GACP,OAAO,UAAiBP,KAAK8I,SAASvI,IAGxCsJ,cAActJ,GACZ,IAAI,KAAEmD,GAAS1D,KACX8J,EAAQpG,EAAKnD,GAKjB,OAJI,YAAmBuJ,KACrBA,EAAQ,GACRpG,EAAKnD,GAAMuJ,GAENA,IAOTpB,gBAAgBrH,GACd,GAAIA,aAAgB,IAClB,OAAOA,EAGT,GAAI,aAAoBA,GAAO,CAC7B,IAAI0I,EAAS,CAAEC,KAAM3I,GACrB,OAAO,IAAI,IAAK0I,GAElB,GAAI,UAAiB1I,GAAO,CAC1B,IAAI0I,EAAS1I,EAAK4I,KAAO5I,EAAK4I,KAAO5I,EACrC,OAAO,IAAI,IAAK0I,GAGlB,OAAO1I,EAGT7B,aAAY,SACVC,EAAW,IAAI,IAAU,KACzBiE,EAAO,GAAE,OACThE,EAAS,IAAI,KACX,IACFC,MAAM,CAAE+D,SACR1D,KAAKP,SAAWA,EAChBO,KAAKN,OAASA,EACdM,KAAK4D,OAAS,IAAI,IAGpBsG,aAAa3J,EAAIgC,GACf,GAAIhC,EAAK,EACP,MAAM,IAAI4J,UAAU,QAAQ5J,KAE9B,GAAIgC,EAAK,EACP,MAAM,IAAI4H,UAAU,QAAQ5H,KAE9B,IAAI0H,EAAOjK,KAAKoK,QAAQ7J,EAAIgC,GAC5B,GAAI,YAAmB0H,GAAO,CAC5B,IAAIH,EAAQ9J,KAAK6J,cAActJ,GAC/B0J,EAAO,IAAI,IACXH,EAAMvH,GAAM0H,EAEd,OAAOA,EAGTG,QAAQ7J,EAAIgC,GACV,IAAI,KAAEmB,GAAS1D,KACX8J,EAAQpG,EAAKnD,GACjB,GAAIuJ,EAAO,CACT,MAAMO,EAAOxB,EAAMyB,SAASR,EAAMvH,IAElC,OADAuH,EAAMvH,GAAM8H,EACLA,EAET,OAAO,UAGTpE,KAAKsE,GACH,MAAM,KAAE7G,GAAS1D,KACjB,IAAK,IAAIoB,EAAI,EAAG2C,EAAML,EAAKvC,OAAQC,EAAI2C,EAAK3C,IAAK,CAC/C,IAAI0I,EAAQpG,EAAKtC,GACjB,GAAI0I,EACF,IAAK,IAAInD,EAAI,EAAG5C,EAAM+F,EAAM3I,OAAQwF,EAAI5C,EAAK4C,IAAK,CAEhD4D,EADWvK,KAAKoK,QAAQhJ,EAAGuF,MAOnC6D,mBAAmBjK,EAAIgC,GACrB,MAAM,OAAE7C,GAAWM,KACbH,EAAQH,EAAO4E,gBAAgB/D,EAAIgC,GACzC,OAAI1C,EACKG,KAAKoK,QAAQvK,EAAM8E,IAAK9E,EAAM+E,KAEhC5E,KAAKoK,QAAQ7J,EAAIgC,GAG1BkI,QAAQlK,EAAIgC,GACV,OAAO,UAAiBvC,KAAKoK,QAAQ7J,EAAIgC,IAG3CmI,QAAQnK,EAAIgC,EAAI0H,GACd,GAAI1J,EAAK,EACP,MAAM,IAAI4J,UAAU,QAAQ5J,KAE9B,GAAIgC,EAAK,EACP,MAAM,IAAI4H,UAAU,QAAQ5H,KAE9B,IAAI,OAAEqB,EAAM,SAAEnE,GAAaO,KACvB2K,EAAW3K,KAAKoK,QAAQ7J,EAAIgC,GAChC,GAAIoI,EAAU,CACZ,IAAIvG,EAAS,CACXlD,KAAM,KACUlB,KAAK8I,SAASvI,GACtBgC,GAAMoI,EACZ/G,EAAOE,QAAQ,SAAU,CACvBvD,KAAIgC,KAAIoI,cAGZnJ,KAAM,KACUxB,KAAK6J,cAActJ,GAC3BgC,GAAM0H,EACZrG,EAAOE,QAAQ,SAAU,CACvBvD,KAAIgC,KAAIoI,eAIdlL,EAAS4C,UAAU+B,GACnBA,EAAO5C,QAIXoJ,aAAarK,EAAIgC,EAAI0H,GACnB,GAAI1J,EAAK,EACP,MAAM,IAAI4J,UAAU,QAAQ5J,KAE9B,GAAIgC,EAAK,EACP,MAAM,IAAI4H,UAAU,QAAQ5H,KAE9B,IAAI,OAAEqB,EAAM,SAAEnE,GAAaO,KACvByK,EAAUzK,KAAKyK,QAAQlK,EAAIgC,GAC3BqH,EAAW5J,KAAK4J,SAASrJ,GACzBoK,EAAW3K,KAAKoK,QAAQ7J,EAAIgC,GAC5B6B,EAAS,CACXlD,KAAM,KACJ,GAAI0I,EAAU,CACZ,MAAME,EAAQ9J,KAAK8I,SAASvI,GACxBkK,EACFX,EAAMvH,GAAMoI,EAEZb,EAAMe,OAAOtI,EAAI,GAEnBqB,EAAOE,QAAQ,SAAU,CACvBvD,KAAIgC,KAAIoI,iBAEL,CACQ3K,KAAKE,UACb2K,OAAOtK,EAAI,GAChBqD,EAAOE,QAAQ,SAAU,CACvBvD,KAAIgC,KAAIoI,eAIdnJ,KAAM,KACJ,GAAIoI,EAAU,CACE5J,KAAK8I,SAASvI,GACtBgC,GAAM0H,EACZrG,EAAOE,QAAQ,SAAU,CACvBvD,KAAIgC,KAAIoI,iBAEL,CACS3K,KAAK6J,cAActJ,GAC3BgC,GAAM0H,EACZrG,EAAOE,QAAQ,SAAU,CACvBvD,KAAIgC,KAAIoI,gBAKhBlL,EAAS4C,UAAU+B,GACnBA,EAAO5C,OAGTlB,UAAUC,GACR,IACIuK,GADA,SAAErL,GAAaO,KAEfoE,EAAS,CACXlD,KAAM,KACA4J,GACF9K,KAAK0D,KAAKmH,OAAOtK,EAAI,EAAGuK,IAG5BtJ,KAAM,KACJsJ,EAAa9K,KAAK0D,KAAKmH,OAAOtK,EAAI,GAAG,KAGzCd,EAAS4C,UAAU+B,GACnBA,EAAO5C,OAGTc,UAAUC,GACR,IAAI,SAAE9C,GAAaO,KACf8K,EAAa,GACb1G,EAAS,CACXlD,KAAM,KACJ,IAAI,OAAEC,GAAW2J,EACjB,IAAK,IAAI1J,EAAI,EAAGA,EAAID,EAAQC,IAAK,CAC/B,MAAM2J,EAAQD,EAAW1J,IACnB,GAAEb,EAAE,KAAEc,GAAS0J,EACP/K,KAAK0D,KAAKnD,GAClBsK,OAAOtI,EAAI,EAAGlB,KAGxBG,KAAM,KACJ,IAAI,OAAEL,GAAWnB,KAAK0D,KACtBoH,EAAa,GACb,IAAK,IAAIvK,EAAK,EAAGA,EAAKY,EAAQZ,IAAM,CAClC,MAAMuJ,EAAQ9J,KAAK0D,KAAKnD,GACxB,GAAIuJ,EAAO,CACT,MAAMzI,EAAOyI,EAAMe,OAAOtI,EAAI,GAAG,GACjCuI,EAAW7I,KAAK,CAAE1B,KAAIc,aAK9B5B,EAAS4C,UAAU+B,GACnBA,EAAO5C,OAGTwJ,aAAazK,GACX,IAAImJ,EAAM1J,KAAK0D,KAAKnD,GAChB0K,EAAO,GACX,GAAIvB,EACF,IAAK,IAAItI,EAAI,EAAG2C,EAAM2F,EAAIvI,OAAQC,EAAI2C,EAAK3C,IAAK,CACnCsI,EAAItI,KAEb6J,EAAK7J,GAAKpB,KAAKoK,QAAQ7J,EAAIa,GAAG8J,cAIpC,OAAOD,EAGTlI,eAAexC,GACb,IAAI,SAAEd,GAAaO,KACfmL,EAAS5K,EAAK,EACd6D,EAAS,CACXlD,KAAM,KACJlB,KAAK0D,KAAKmH,OAAOM,EAAQ,IAE3B3J,KAAM,KACJ,MAAMyJ,EAAOjL,KAAKgL,aAAaG,GAC/BnL,KAAK0D,KAAKmH,OAAOM,EAAQ,EAAGF,KAGhCxL,EAAS4C,UAAU+B,GACnBA,EAAO5C,OAGTiB,eAAeF,GACb,IAAI,SAAE9C,GAAaO,KACfmL,EAAS5I,EAAK,EACd6B,EAAS,CACXlD,KAAM,KACJ,IAAK,IAAIE,EAAI,EAAG2C,EAAM/D,KAAK0D,KAAKvC,OAAQC,EAAI2C,EAAK3C,IAAK,CACpD,MAAM0I,EAAQ9J,KAAK0D,KAAKtC,GACpB0I,GACFA,EAAMe,OAAOM,EAAQ,KAI3B3J,KAAM,KACJ,IAAK,IAAIJ,EAAI,EAAG2C,EAAM/D,KAAK0D,KAAKvC,OAAQC,EAAI2C,EAAK3C,IAAK,CACpD,MAAM0I,EAAQ9J,KAAK0D,KAAKtC,GACxB,GAAI0I,EAAO,CACT,MAAMG,EAAOjK,KAAKoK,QAAQhJ,EAAG+J,GACvBF,EAAOhB,EAAOA,EAAKiB,kBAAe1B,EACxCM,EAAMe,OAAOM,EAAQ,EAAGF,OAKhCxL,EAAS4C,UAAU+B,GACnBA,EAAO5C,OAGT0B,gBAAgB3C,GACd,IAAI,SAAEd,GAAaO,KACfmL,EAAS5K,EACT6D,EAAS,CACXlD,KAAM,KACJlB,KAAK0D,KAAKmH,OAAOM,EAAQ,IAE3B3J,KAAM,KACJ,MAAMyJ,EAAOjL,KAAKgL,aAAaG,GAC/BnL,KAAK0D,KAAKmH,OAAOM,EAAQ,EAAGF,KAGhCxL,EAAS4C,UAAU+B,GACnBA,EAAO5C,OAGToB,gBAAgBL,GACd,IAAI,SAAE9C,GAAaO,KACfmL,EAAS5I,EACT6B,EAAS,CACXlD,KAAM,KACJ,IAAK,IAAIE,EAAI,EAAG2C,EAAM/D,KAAK0D,KAAKvC,OAAQC,EAAI2C,EAAK3C,IAAK,CACpD,MAAM0I,EAAQ9J,KAAK0D,KAAKtC,GACpB0I,GACFA,EAAMe,OAAOM,EAAQ,KAI3B3J,KAAM,KACJ,IAAK,IAAIJ,EAAI,EAAG2C,EAAM/D,KAAK0D,KAAKvC,OAAQC,EAAI2C,EAAK3C,IAAK,CACpD,MAAM0I,EAAQ9J,KAAK0D,KAAKtC,GACxB,GAAI0I,EAAO,CACT,MAAMG,EAAOjK,KAAKoK,QAAQhJ,EAAG+J,GACvBF,EAAOhB,EAAOA,EAAKiB,kBAAe1B,EACxCM,EAAMe,OAAOM,EAAQ,EAAGF,OAKhCxL,EAAS4C,UAAU+B,GACnBA,EAAO5C,U,gCCnbX,MAAM4J,EAEJ5L,cACEQ,KAAKqL,KAAO,GAGdtC,QACEuC,OAAOC,MAAMC,WACJxL,KAAKqL,KAAKG,MAIrBC,aAAaD,UACJxL,KAAKqL,KAAKG,GAGnBE,eAAeF,EAAKG,GAClB3L,KAAKqL,KAAKG,GAAOG,EAGnB7H,QAAQ0H,KAAQI,GACV5L,KAAKqL,KAAKG,IACZxL,KAAKqL,KAAKG,MAAQI,M,eCtBxB,SAASC,EAAQC,EAAGC,GAClB,OAAOD,EAAIC,GAAK,EAAID,EAAIC,EAAI,EAAI,EAGlC,SAASC,EAAKC,EAAK7K,EAAGuF,GACpB,IAAIuF,EAAMD,EAAI7K,GACd6K,EAAI7K,GAAK6K,EAAItF,GACbsF,EAAItF,GAAKuF,EAGX,SAASC,EAAMF,EAAKG,EAAGjE,EAAMD,EAAOmE,GAClC,KAAOnE,EAAQC,GAAM,CACnB,GAAID,EAAQC,EAAO,IAAK,CACtB,IAAImE,EAAIpE,EAAQC,EAAO,EACnBoE,EAAIH,EAAIjE,EAAO,EACfqE,EAAIhH,KAAKiH,IAAIH,GACbI,EAAI,GAAMlH,KAAKmH,IAAI,EAAIH,EAAI,GAC3BI,EAAK,GAAMpH,KAAKqH,KAAKL,EAAIE,GAAKJ,EAAII,GAAKJ,IAAMC,EAAID,EAAI,EAAI,GAAK,EAAI,GAGtEH,EAAMF,EAAKG,EAFG5G,KAAKC,IAAI0C,EAAM3C,KAAKsH,MAAMV,EAAIG,EAAIG,EAAIJ,EAAIM,IACzCpH,KAAKuH,IAAI7E,EAAO1C,KAAKsH,MAAMV,GAAKE,EAAIC,GAAKG,EAAIJ,EAAIM,IAC/BP,GAGnC,IAAIW,EAAIf,EAAIG,GACRhL,EAAI+G,EACJxB,EAAIuB,EAKR,IAHA8D,EAAKC,EAAK9D,EAAMiE,GACZC,EAAQJ,EAAI/D,GAAQ8E,GAAK,GAAGhB,EAAKC,EAAK9D,EAAMD,GAEzC9G,EAAIuF,GAAG,CAIZ,IAHAqF,EAAKC,EAAK7K,EAAGuF,GACbvF,IACAuF,IACO0F,EAAQJ,EAAI7K,GAAI4L,GAAK,GAAG5L,IAC/B,KAAOiL,EAAQJ,EAAItF,GAAIqG,GAAK,GAAGrG,IAGH,IAA1B0F,EAAQJ,EAAI9D,GAAO6E,GAAUhB,EAAKC,EAAK9D,EAAMxB,IAE/CA,IACAqF,EAAKC,EAAKtF,EAAGuB,IAGXvB,GAAKyF,IAAGjE,EAAOxB,EAAI,GACnByF,GAAKzF,IAAGuB,EAAQvB,EAAI,IAI5B,SAASsG,EAAShB,EAAKG,EAAGjE,EAAMD,EAAOmE,GACrCF,EAAMF,EAAKG,EAAGjE,GAAQ,EAAGD,GAAU+D,EAAI9K,OAAS,EAAIkL,GAAWR,G,gEChDjE,SAASqB,EAAS7L,EAAMyI,EAAOqD,GAC7B,IAAKA,EACH,OAAOrD,EAAMsD,QAAQ/L,GAEvB,IAAK,IAAID,EAAI,EAAGA,EAAI0I,EAAM3I,OAAQC,IAChC,GAAI+L,EAAS9L,EAAMyI,EAAM1I,IAAK,OAAOA,EAEvC,OAAQ,EAEV,SAASiM,EAAOvB,EAAGC,GAKjB,OAJAD,EAAE9J,KAAOwD,KAAKuH,IAAIjB,EAAE9J,KAAM+J,EAAE/J,MAC5B8J,EAAEpK,KAAO8D,KAAKuH,IAAIjB,EAAEpK,KAAMqK,EAAErK,MAC5BoK,EAAE/J,KAAOyD,KAAKC,IAAIqG,EAAE/J,KAAMgK,EAAEhK,MAC5B+J,EAAEnK,KAAO6D,KAAKC,IAAIqG,EAAEnK,KAAMoK,EAAEpK,MACrBmK,EAET,SAASwB,EAAgBxB,EAAGC,GAC1B,OAAOD,EAAE9J,KAAO+J,EAAE/J,KAEpB,SAASuL,EAAgBzB,EAAGC,GAC1B,OAAOD,EAAEpK,KAAOqK,EAAErK,KAEpB,SAAS8L,EAAS1B,GAChB,OAAQA,EAAE/J,KAAO+J,EAAE9J,OAAS8J,EAAEnK,KAAOmK,EAAEpK,MAEzC,SAAS+L,EAAW3B,GAClB,OAAQA,EAAE/J,KAAO+J,EAAE9J,MAAS8J,EAAEnK,KAAOmK,EAAEpK,MAKzC,SAASgM,EAAiB5B,EAAGC,GAC3B,MAAM/J,EAAOwD,KAAKC,IAAIqG,EAAE9J,KAAM+J,EAAE/J,MAC1BN,EAAO8D,KAAKC,IAAIqG,EAAEpK,KAAMqK,EAAErK,MAC1BK,EAAOyD,KAAKuH,IAAIjB,EAAE/J,KAAMgK,EAAEhK,MAC1BJ,EAAO6D,KAAKuH,IAAIjB,EAAEnK,KAAMoK,EAAEpK,MAChC,OAAO6D,KAAKC,IAAI,EAAG1D,EAAOC,GAAQwD,KAAKC,IAAI,EAAG9D,EAAOD,GAEvD,SAASsF,EAAS8E,EAAGC,GACnB,OAAOD,EAAE9J,MAAQ+J,EAAE/J,MAAQ8J,EAAEpK,MAAQqK,EAAErK,MAAQqK,EAAEhK,MAAQ+J,EAAE/J,MAAQgK,EAAEpK,MAAQmK,EAAEnK,KAEjF,SAASyF,EAAW0E,EAAGC,GACrB,OAAOA,EAAE/J,MAAQ8J,EAAE/J,MAAQgK,EAAErK,MAAQoK,EAAEnK,MAAQoK,EAAEhK,MAAQ+J,EAAE9J,MAAQ+J,EAAEpK,MAAQmK,EAAEpK,KAEjF,SAASiM,EAAWC,GAClB,MAAO,CACLA,gBACAC,OAAQ,EACRC,MAAM,EACN9L,KAAM+L,IACNrM,KAAMqM,IACNhM,MAAOgM,IACPpM,MAAOoM,KAGX,SAASC,EAASC,EAAM7B,EAAG8B,EAAGC,EAAQC,GAE/BA,IAAUA,EAAWT,EAAW,OACrCS,EAASpM,KAAO+L,IAChBK,EAAS1M,KAAOqM,IAChBK,EAASrM,MAAQgM,IACjBK,EAASzM,MAAQoM,IACjB,IAAK,IAAI3M,EAAIgL,EAAGhL,EAAI8M,EAAG9M,IAAK,CAC1B,MAAMiN,EAAQJ,EAAKL,cAAcxM,GACjCiM,EAAOe,EAAUH,EAAKH,KAAOK,EAAOE,GAASA,GAE/C,OAAOD,EAET,SAASE,EAASL,EAAME,GAEtBH,EAASC,EAAM,EAAGA,EAAKL,cAAczM,OAAQgN,EAAQF,GAEvD,SAASM,EAAYtC,EAAK9D,EAAMD,EAAOoE,EAAGD,GAGxC,MAAMmC,EAAQ,CAACrG,EAAMD,GACrB,KAAOsG,EAAMrN,QAAQ,CAGnB,IAFA+G,EAAQsG,EAAM3K,QACdsE,EAAOqG,EAAM3K,QACOyI,EAAG,SACvB,MAAMmC,EAAMtG,EAAO3C,KAAKkJ,MAAMxG,EAAQC,GAAQmE,EAAI,GAAKA,GACvD,OAASL,EAAKwC,EAAKtG,EAAMD,EAAOmE,GAChCmC,EAAMvM,KAAKkG,EAAMsG,EAAKA,EAAKvG,IAI/B,MAAMyG,EACJnP,YAAYoP,EAAa,GAEvB5O,KAAK6O,YAAcrJ,KAAKC,IAAI,EAAGmJ,GAC/B5O,KAAK8O,YAActJ,KAAKC,IAAI,EAAGD,KAAKkJ,KAAwB,GAAnB1O,KAAK6O,cAC9C7O,KAAK+I,QAGP1D,MACE,OAAOrF,KAAK+O,KAAK/O,KAAK0D,KAAM,IAG9B1C,OAAOuD,GACL,IAAI0J,EAAOjO,KAAK0D,KAChB,MAAMsL,EAAS,GAEf,IAAK5H,EAAW7C,EAAM0J,GACpB,OAAOe,EAGT,MAAMb,EAASnO,KAAKmO,OACdc,EAAgB,GAEtB,KAAOhB,GAAM,CACX,IAAK,IAAI7M,EAAI,EAAGA,EAAI6M,EAAKL,cAAczM,OAAQC,IAAK,CAClD,MAAMiN,EAAQJ,EAAKL,cAAcxM,GAC3B8N,EAAYjB,EAAKH,KAAOK,EAAOE,GAASA,EAC1CjH,EAAW7C,EAAM2K,KACfjB,EAAKH,KAAMkB,EAAO/M,KAAKoM,GAClBrH,EAASzC,EAAM2K,GAAYlP,KAAK+O,KAAKV,EAAOW,GAChDC,EAAchN,KAAKoM,IAG5BJ,EAAOgB,EAAcpL,MAGvB,OAAOmL,EAGTvK,MAAMF,GACJ,OAAOvE,KAAKgB,OAAOuD,GAAM,GAG3B4K,SAAS5K,GACP,IAAI0J,EAAOjO,KAAK0D,KAEhB,IAAK0D,EAAW7C,EAAM0J,GACpB,OAAO,EAGT,MAAMgB,EAAgB,GACtB,KAAOhB,GAAM,CACX,IAAK,IAAI7M,EAAI,EAAGA,EAAI6M,EAAKL,cAAczM,OAAQC,IAAK,CAClD,MAAMiN,EAAQJ,EAAKL,cAAcxM,GAC3B8N,EAAYjB,EAAKH,KAAO9N,KAAKmO,OAAOE,GAASA,EACnD,GAAIjH,EAAW7C,EAAM2K,GAAY,CAC/B,GAAIjB,EAAKH,MAAQ9G,EAASzC,EAAM2K,GAAY,OAAO,EACnDD,EAAchN,KAAKoM,IAGvBJ,EAAOgB,EAAcpL,MAGvB,OAAO,EAGTtC,KAAKmC,GACH,IAAMA,IAAQA,EAAKvC,OACjB,OAAOnB,KAGT,GAAI0D,EAAKvC,OAASnB,KAAK8O,YAAa,CAClC,IAAK,IAAI1N,EAAI,EAAGA,EAAIsC,EAAKvC,OAAQC,IAC/BpB,KAAK+E,OAAOrB,EAAKtC,IAEnB,OAAOpB,KAIT,IAAIiO,EAAOjO,KAAKoP,OAAO1L,EAAK+F,QAAS,EAAG/F,EAAKvC,OAAS,EAAG,GAEzD,GAAKnB,KAAK0D,KAAKkK,cAAczM,OAGtB,GAAInB,KAAK0D,KAAKmK,SAAWI,EAAKJ,OAEnC7N,KAAKqP,WAAWrP,KAAK0D,KAAMuK,OACtB,CACL,GAAIjO,KAAK0D,KAAKmK,OAASI,EAAKJ,OAAQ,CAElC,MAAMyB,EAAUtP,KAAK0D,KACrB1D,KAAK0D,KAAOuK,EACZA,EAAOqB,EAGTtP,KAAKuP,QAAQtB,EAAMjO,KAAK0D,KAAKmK,OAASI,EAAKJ,OAAS,GAAG,QAZvD7N,KAAK0D,KAAOuK,EAed,OAAOjO,KAGT+E,OAAO1D,GAIL,OAHIA,GACFrB,KAAKuP,QAAQlO,EAAMrB,KAAK0D,KAAKmK,OAAS,GAEjC7N,KAGT+I,QAEE,OADA/I,KAAK0D,KAAOiK,EAAW,IAChB3N,KAGTsB,OAAOD,EAAM8L,GACX,IAAK9L,EACH,OAAOrB,KAGT,IAAIiO,EAAOjO,KAAK0D,KAChB,MAAMa,EAAOvE,KAAKmO,OAAO9M,GACnBmO,EAAO,GACPC,EAAU,GAChB,IAAIrO,EACAsO,EACAC,EAGJ,KAAO1B,GAAQuB,EAAKrO,QAAQ,CAS1B,GARK8M,IAEHA,EAAOuB,EAAK3L,MACZ6L,EAASF,EAAKA,EAAKrO,OAAS,GAC5BC,EAAIqO,EAAQ5L,MACZ8L,GAAU,GAGR1B,EAAKH,KAAM,CAEb,MAAM8B,EAAQ1C,EAAS7L,EAAM4M,EAAKL,cAAeT,GACjD,IAAe,IAAXyC,EAKF,OAHA3B,EAAKL,cAAc/C,OAAO+E,EAAO,GACjCJ,EAAKvN,KAAKgM,GACVjO,KAAK6P,UAAUL,GACRxP,KAIN2P,GAAY1B,EAAKH,OAAQ9G,EAASiH,EAAM1J,GAOlCmL,GAETtO,IACA6M,EAAOyB,EAAO9B,cAAcxM,GAC5BuO,GAAU,GAGV1B,EAAO,MAZPuB,EAAKvN,KAAKgM,GACVwB,EAAQxN,KAAKb,GACbA,EAAI,EACJsO,EAASzB,EACTA,EAAOA,EAAKL,cAAc,IAY9B,OAAO5N,KAGTmO,OAAO9M,GACL,OAAOA,EAGTyO,YAAYhE,EAAGC,GACb,OAAOD,EAAE9J,KAAO+J,EAAE/J,KAGpB+N,YAAYjE,EAAGC,GACb,OAAOD,EAAEpK,KAAOqK,EAAErK,KAGpBqN,KAAKd,EAAMe,GACT,MAAMC,EAAgB,GACtB,KAAOhB,GACDA,EAAKH,KACPkB,EAAO/M,QAAQgM,EAAKL,eAEpBqB,EAAchN,QAAQgM,EAAKL,eAE7BK,EAAOgB,EAAcpL,MAEvB,OAAOmL,EAGTI,OAAOtF,EAAO3B,EAAMD,EAAO2F,GACzB,MAAMmC,EAAI9H,EAAQC,EAAO,EACzB,IACI8F,EADAgC,EAAIjQ,KAAK6O,YAGb,GAAImB,GAAKC,EAIP,OAFAhC,EAAON,EAAW7D,EAAML,MAAMtB,EAAMD,EAAQ,IAC5CoG,EAASL,EAAMjO,KAAKmO,QACbF,EAGJJ,IAEHA,EAASrI,KAAKkJ,KAAKlJ,KAAKiH,IAAIuD,GAAKxK,KAAKiH,IAAIwD,IAE1CA,EAAIzK,KAAKkJ,KAAKsB,EAAIC,IAAMpC,EAAS,KAGnCI,EAAON,EAAW,IAClBM,EAAKH,MAAO,EACZG,EAAKJ,OAASA,EAGd,MAAMqC,EAAK1K,KAAKkJ,KAAKsB,EAAIC,GACnBE,EAAKD,EAAK1K,KAAKkJ,KAAKlJ,KAAKqH,KAAKoD,IAEpC1B,EAAYzE,EAAO3B,EAAMD,EAAOiI,EAAInQ,KAAK8P,aAEzC,IAAK,IAAI1O,EAAI+G,EAAM/G,GAAK8G,EAAO9G,GAAK+O,EAAI,CACtC,MAAMC,EAAS5K,KAAKuH,IAAI3L,EAAI+O,EAAK,EAAGjI,GACpCqG,EAAYzE,EAAO1I,EAAGgP,EAAQF,EAAIlQ,KAAK+P,aACvC,IAAK,IAAIpJ,EAAIvF,EAAGuF,GAAKyJ,EAAQzJ,GAAKuJ,EAAI,CACpC,MAAMG,EAAS7K,KAAKuH,IAAIpG,EAAIuJ,EAAK,EAAGE,GAEpCnC,EAAKL,cAAc3L,KAAKjC,KAAKoP,OAAOtF,EAAOnD,EAAG0J,EAAQxC,EAAS,KAMnE,OAFAS,EAASL,EAAMjO,KAAKmO,QAEbF,EAGTqC,eAAe/L,EAAM0J,EAAMsC,EAAOf,GAChC,KACEA,EAAKvN,KAAKgM,IAENA,EAAKH,MAAQ0B,EAAKrO,OAAS,IAAMoP,GAH1B,CAOX,IAEIC,EAFAC,EAAU1C,IACV2C,EAAiB3C,IAGrB,IAAK,IAAI3M,EAAI,EAAGA,EAAI6M,EAAKL,cAAczM,OAAQC,IAAK,CAClD,MAAMiN,EAAQJ,EAAKL,cAAcxM,GAC3BuP,EAAOnD,EAASa,GAChBuC,GAvTQ9E,EAuTmBvH,EAvThBwH,EAuTsBsC,GAtTrC7I,KAAKC,IAAIsG,EAAEhK,KAAM+J,EAAE/J,MAAQyD,KAAKuH,IAAIhB,EAAE/J,KAAM8J,EAAE9J,QAAUwD,KAAKC,IAAIsG,EAAEpK,KAAMmK,EAAEnK,MAAQ6D,KAAKuH,IAAIhB,EAAErK,KAAMoK,EAAEpK,OAsTxDiP,GAG5CC,EAAcF,GAChBA,EAAiBE,EACjBH,EAAUE,EAAOF,EAAUE,EAAOF,EAClCD,EAAanC,GACJuC,IAAgBF,GAErBC,EAAOF,IACTA,EAAUE,EACVH,EAAanC,GAKnBJ,EAAOuC,GAAcvC,EAAKL,cAAc,GAvU9C,IAAsB9B,EAAGC,EA0UrB,OAAOkC,EAGTsB,QAAQlO,EAAMkP,EAAOM,GACnB,MAAMtM,EAAOsM,EAASxP,EAAOrB,KAAKmO,OAAO9M,GACnCyP,EAAa,GAGb7C,EAAOjO,KAAKsQ,eAAe/L,EAAMvE,KAAK0D,KAAM6M,EAAOO,GAOzD,IAJA7C,EAAKL,cAAc3L,KAAKZ,GACxBgM,EAAOY,EAAM1J,GAGNgM,GAAS,GACVO,EAAWP,GAAO3C,cAAczM,OAASnB,KAAK6O,aAChD7O,KAAK+Q,OAAOD,EAAYP,GACxBA,IAOJvQ,KAAKgR,oBAAoBzM,EAAMuM,EAAYP,GAI7CQ,OAAOD,EAAYP,GACjB,MAAMtC,EAAO6C,EAAWP,GAClBN,EAAIhC,EAAKL,cAAczM,OACvBoL,EAAIvM,KAAK8O,YAEf9O,KAAKiR,iBAAiBhD,EAAM1B,EAAG0D,GAE/B,MAAMiB,EAAalR,KAAKmR,kBAAkBlD,EAAM1B,EAAG0D,GAE7CmB,EAAUzD,EAAWM,EAAKL,cAAc/C,OAAOqG,EAAYjD,EAAKL,cAAczM,OAAS+P,IAC7FE,EAAQvD,OAASI,EAAKJ,OACtBuD,EAAQtD,KAAOG,EAAKH,KAEpBQ,EAASL,EAAMjO,KAAKmO,QACpBG,EAAS8C,EAASpR,KAAKmO,QAEnBoC,EACFO,EAAWP,EAAQ,GAAG3C,cAAc3L,KAAKmP,GAEzCpR,KAAKqP,WAAWpB,EAAMmD,GAI1B/B,WAAWpB,EAAMmD,GAEfpR,KAAK0D,KAAOiK,EAAW,CAACM,EAAMmD,IAC9BpR,KAAK0D,KAAKmK,OAASI,EAAKJ,OAAS,EACjC7N,KAAK0D,KAAKoK,MAAO,EACjBQ,EAAStO,KAAK0D,KAAM1D,KAAKmO,QAG3BgD,kBAAkBlD,EAAM1B,EAAG0D,GACzB,IAAIL,EACAyB,EAAatD,IACb0C,EAAU1C,IAEd,IAAK,IAAI3M,EAAImL,EAAGnL,GAAK6O,EAAI1D,EAAGnL,IAAK,CAC/B,MAAMkQ,EAAQtD,EAASC,EAAM,EAAG7M,EAAGpB,KAAKmO,QAClCoD,EAAQvD,EAASC,EAAM7M,EAAG6O,EAAGjQ,KAAKmO,QAElCqD,EAAU9D,EAAiB4D,EAAOC,GAClCZ,EAAOnD,EAAS8D,GAAS9D,EAAS+D,GAGpCC,EAAUH,GACZA,EAAaG,EACb5B,EAAQxO,EACRqP,EAAUE,EAAOF,EAAUE,EAAOF,GACzBe,IAAYH,GAEjBV,EAAOF,IACTA,EAAUE,EACVf,EAAQxO,GAKd,OAAOwO,GAASK,EAAI1D,EAItB0E,iBAAiBhD,EAAM1B,EAAG0D,GACxB,MAAMH,EAAc7B,EAAKH,KAAO9N,KAAK8P,YAAcxC,EAC7CyC,EAAc9B,EAAKH,KAAO9N,KAAK+P,YAAcxC,EACnCvN,KAAKyR,eAAexD,EAAM1B,EAAG0D,EAAGH,GAChC9P,KAAKyR,eAAexD,EAAM1B,EAAG0D,EAAGF,IAI9C9B,EAAKL,cAAc8D,KAAK5B,GAK5B2B,eAAexD,EAAM1B,EAAG0D,EAAG5D,GACzB4B,EAAKL,cAAc8D,KAAKrF,GAExB,MAAM8B,EAASnO,KAAKmO,OACdwD,EAAW3D,EAASC,EAAM,EAAG1B,EAAG4B,GAChCyD,EAAY5D,EAASC,EAAMgC,EAAI1D,EAAG0D,EAAG9B,GAC3C,IAAI0D,EAASpE,EAAWkE,GAAYlE,EAAWmE,GAE/C,IAAK,IAAIxQ,EAAImL,EAAGnL,EAAI6O,EAAI1D,EAAGnL,IAAK,CAC9B,MAAMiN,EAAQJ,EAAKL,cAAcxM,GACjCiM,EAAOsE,EAAU1D,EAAKH,KAAOK,EAAOE,GAASA,GAC7CwD,GAAUpE,EAAWkE,GAGvB,IAAK,IAAIvQ,EAAI6O,EAAI1D,EAAI,EAAGnL,GAAKmL,EAAGnL,IAAK,CACnC,MAAMiN,EAAQJ,EAAKL,cAAcxM,GACjCiM,EAAOuE,EAAW3D,EAAKH,KAAOK,EAAOE,GAASA,GAC9CwD,GAAUpE,EAAWmE,GAGvB,OAAOC,EAGTb,oBAAoBzM,EAAMiL,EAAMe,GAE9B,IAAK,IAAInP,EAAImP,EAAOnP,GAAK,EAAGA,IAC1BiM,EAAOmC,EAAKpO,GAAImD,GAIpBsL,UAAUL,GAER,IAAK,IAAyBsC,EAArB1Q,EAAIoO,EAAKrO,OAAS,EAAaC,GAAK,EAAGA,IACT,IAAjCoO,EAAKpO,GAAGwM,cAAczM,OACpBC,EAAI,GACN0Q,EAAWtC,EAAKpO,EAAI,GAAGwM,cACvBkE,EAASjH,OAAOiH,EAAS1E,QAAQoC,EAAKpO,IAAK,IAE3CpB,KAAK+I,QAGPuF,EAASkB,EAAKpO,GAAIpB,KAAKmO,W,8CCtf/B,MAAM4D,EAEJrJ,mBAAmBnE,GACjB,OAAO,IAAI,IAAUA,EAAK7C,KAAM6C,EAAKvC,KAAMuC,EAAK5C,KAAM4C,EAAKxC,MAG7D2G,mBAAmBtI,GACjB,MAAO,CACL4B,KAAM5B,EAAMwE,IACZlD,KAAMtB,EAAMuE,IACZ5C,KAAM3B,EAAM0F,IACZnE,KAAMvB,EAAMyF","sources":["webpack://x-sheet/./src/core/table/merges/Merges.js","webpack://x-sheet/./src/core/table/snapshot/Snapshot.js","webpack://x-sheet/./src/core/table/tablebase/RangeTree.js","webpack://x-sheet/./src/core/table/tablebase/RectRange.js","webpack://x-sheet/./src/core/table/tablecell/Cells.js","webpack://x-sheet/./src/lib/Listen.js","webpack://x-sheet/./src/lib/recttree/QkSelect.js","webpack://x-sheet/./src/lib/recttree/RectTree.js","webpack://x-sheet/./src/utils/RtreeUtils.js"],"sourcesContent":["import { RectRange } from '../tablebase/RectRange';\nimport { Snapshot } from '../snapshot/Snapshot';\nimport { RangeTree } from '../tablebase/RangeTree';\nimport { RtreeUtils } from '../../../utils/RtreeUtils';\n\n/**\n * Merges\n */\nclass Merges extends RangeTree {\n\n  /**\n     * Merges 合并区域管理\n     */\n  constructor({\n    snapshot = new Snapshot(),\n    merges = [],\n  } = {}) {\n    super({ snapshot });\n    merges.map((merge) => RectRange.valueOf(merge)).forEach((view) => this.add(view));\n  }\n\n  /**\n   * 获取矩形的json数据\n   */\n  getData() {\n    return {\n      merges: this.getAll().map((range) => range.toString()),\n    };\n  }\n\n  /**\n   * 删除行号\n   * @param ri\n   * @param number\n   */\n  removeRow(ri, number) {\n    let { rTree, snapshot } = this;\n    let footRange = new RectRange(ri, 0, RangeTree.MAX_ROW, RangeTree.MAX_COL);\n    let fullRange = this.getFullRowRange(ri, number);\n    let fullBbox = RtreeUtils.rangeToBbox(fullRange);\n    let footBbox = RtreeUtils.rangeToBbox(footRange);\n    let divers = [];\n    let search = [];\n    let mergeAction = {\n      undo: () => {\n        let { length } = divers;\n        for (let i = 0; i < length; i++) {\n          const item = divers[i];\n          rTree.remove(item);\n        }\n        rTree.load(search);\n      },\n      redo: () => {\n        divers = [];\n        search = rTree.search(footBbox);\n        let { length } = search;\n        for (let i = 0; i < length; i++) {\n          const item = search[i];\n          const clone = { ...item };\n          rTree.remove(item);\n          if (clone.minY < fullBbox.minY) {\n            if (clone.maxY < fullBbox.maxY) {\n              let diffMax = clone.maxY - fullBbox.minY;\n              diffMax += 1;\n              clone.oldMax = clone.maxY;\n              clone.maxY -= diffMax;\n              clone.style = 'oddValue';\n              if (clone.maxX !== clone.minX || clone.maxY !== clone.minY) {\n                divers.push(clone);\n              }\n              continue;\n            }\n            if (clone.maxY > fullBbox.maxY) {\n              let diffMax = fullBbox.maxY - footBbox.minY;\n              diffMax += 1;\n              clone.oldMax = clone.maxY;\n              clone.maxY -= diffMax;\n              clone.style = 'oddValue';\n              if (clone.maxX !== clone.minX || clone.maxY !== clone.minY) {\n                divers.push(clone);\n              }\n              continue;\n            }\n            if (clone.maxY === fullBbox.maxY) {\n              let diffMax = fullBbox.maxY - footBbox.minY;\n              diffMax += 1;\n              clone.oldMax = clone.maxY;\n              clone.maxY -= diffMax;\n              clone.style = 'oddValue';\n              if (clone.maxX !== clone.minX || clone.maxY !== clone.minY) {\n                divers.push(clone);\n              }\n              continue;\n            }\n          }\n          if (clone.minY > fullBbox.minY) {\n            if (clone.minY < fullBbox.maxY) {\n              if (clone.maxY > fullBbox.maxY) {\n                let diffMin = clone.minY - fullBbox.minY;\n                let diffMax = fullBbox.maxY - clone.minY;\n                diffMax += diffMin + 1;\n                clone.oldMax = clone.maxY;\n                clone.oldMin = clone.minY;\n                clone.maxY -= diffMax;\n                clone.minY -= diffMin;\n                clone.style = 'evenValue';\n                if (clone.maxX !== clone.minX || clone.maxY !== clone.minY) {\n                  divers.push(clone);\n                }\n                continue;\n              }\n            }\n            if (clone.minY > fullBbox.maxY) {\n              let diffValue = fullBbox.maxY - fullBbox.minY;\n              diffValue += 1;\n              clone.oldMax = clone.maxY;\n              clone.oldMin = clone.minY;\n              clone.maxY -= diffValue;\n              clone.minY -= diffValue;\n              clone.style = 'evenValue';\n              if (clone.maxX !== clone.minX || clone.maxY !== clone.minY) {\n                divers.push(clone);\n              }\n              continue;\n            }\n          }\n          if (clone.minY === fullBbox.minY) {\n            if (clone.maxY > fullBbox.maxY) {\n              let diffMax = fullBbox.maxY - clone.minY;\n              diffMax += 1;\n              clone.oldMax = clone.maxY;\n              clone.maxY -= diffMax;\n              clone.style = 'oddValue';\n              if (clone.maxX !== clone.minX || clone.maxY !== clone.minY) {\n                divers.push(clone);\n              }\n            }\n          }\n        }\n        rTree.load(divers);\n      },\n    };\n    snapshot.addAction(mergeAction);\n    mergeAction.redo();\n  }\n\n  /**\n   * 删除列号\n   * @param ci\n   * @param number\n   */\n  removeCol(ci, number) {\n    let { rTree, snapshot } = this;\n    let footRange = new RectRange(0, ci, RangeTree.MAX_ROW, RangeTree.MAX_COL);\n    let fullRange = this.getFullColRange(ci, number);\n    let fullBbox = RtreeUtils.rangeToBbox(fullRange);\n    let footBbox = RtreeUtils.rangeToBbox(footRange);\n    let divers = [];\n    let search = [];\n    let mergeAction = {\n      undo: () => {\n        let { length } = divers;\n        for (let i = 0; i < length; i++) {\n          const item = divers[i];\n          rTree.remove(item);\n        }\n        rTree.load(search);\n      },\n      redo: () => {\n        divers = [];\n        search = rTree.search(footBbox);\n        let { length } = search;\n        for (let i = 0; i < length; i++) {\n          const item = search[i];\n          const clone = { ...item };\n          rTree.remove(item);\n          if (clone.minX < fullBbox.minX) {\n            if (clone.maxX < fullBbox.maxX) {\n              let diffMax = clone.maxX - fullBbox.minX;\n              diffMax += 1;\n              clone.oldMax = clone.maxX;\n              clone.maxX -= diffMax;\n              clone.style = 'oddValue';\n              if (clone.maxX !== clone.minX || clone.maxY !== clone.minY) {\n                divers.push(clone);\n              }\n              continue;\n            }\n            if (clone.maxX > fullBbox.maxX) {\n              let diffMax = fullBbox.maxX - footBbox.minX;\n              diffMax += 1;\n              clone.oldMax = clone.maxX;\n              clone.maxX -= diffMax;\n              clone.style = 'oddValue';\n              if (clone.maxX !== clone.minX || clone.maxY !== clone.minY) {\n                divers.push(clone);\n              }\n              continue;\n            }\n            if (clone.maxX === fullBbox.maxX) {\n              let diffMax = fullBbox.maxX - footBbox.minX;\n              diffMax += 1;\n              clone.oldMax = clone.maxX;\n              clone.maxX -= diffMax;\n              clone.style = 'oddValue';\n              if (clone.maxX !== clone.minX || clone.maxY !== clone.minY) {\n                divers.push(clone);\n              }\n              continue;\n            }\n          }\n          if (clone.minX > fullBbox.minX) {\n            if (clone.minX < fullBbox.maxX) {\n              if (clone.maxX > fullBbox.maxX) {\n                let diffMin = clone.minX - fullBbox.minX;\n                let diffMax = fullBbox.maxX - clone.minX;\n                diffMax += diffMin + 1;\n                clone.oldMax = clone.maxX;\n                clone.oldMin = clone.minX;\n                clone.maxX -= diffMax;\n                clone.minX -= diffMin;\n                clone.style = 'evenValue';\n                if (clone.maxX !== clone.minX || clone.maxY !== clone.minY) {\n                  divers.push(clone);\n                }\n                continue;\n              }\n            }\n            if (clone.minX > fullBbox.maxX) {\n              let diffValue = fullBbox.maxX - fullBbox.minX;\n              diffValue += 1;\n              clone.oldMax = clone.maxX;\n              clone.oldMin = clone.minX;\n              clone.maxX -= diffValue;\n              clone.minX -= diffValue;\n              clone.style = 'evenValue';\n              if (clone.maxX !== clone.minX || clone.maxY !== clone.minY) {\n                divers.push(clone);\n              }\n              continue;\n            }\n          }\n          if (clone.minX === fullBbox.minX) {\n            if (clone.maxX > fullBbox.maxX) {\n              let diffMax = fullBbox.maxX - clone.minX;\n              diffMax += 1;\n              clone.oldMax = clone.maxX;\n              clone.maxX -= diffMax;\n              clone.style = 'oddValue';\n              if (clone.maxX !== clone.minX || clone.maxY !== clone.minY) {\n                divers.push(clone);\n              }\n            }\n          }\n        }\n        rTree.load(divers);\n      },\n    };\n    snapshot.addAction(mergeAction);\n    mergeAction.redo();\n  }\n\n  /**\n   * 插入新列时调整区域大小和位置\n   * @param ci\n   * @param number\n   */\n  insertColAfter(ci, number) {\n    const { snapshot } = this;\n    const mergeAction = {\n      undo: () => {\n        this.colAfterShrink(ci, number);\n      },\n      redo: () => {\n        this.colAfterExpand(ci, number);\n      },\n    };\n    snapshot.addAction(mergeAction);\n    mergeAction.redo();\n  }\n\n  /**\n   * 插入新列时调整区域大小和位置\n   * @param ci\n   * @param number\n   */\n  insertColBefore(ci, number) {\n    const { snapshot } = this;\n    const mergeAction = {\n      undo: () => {\n        this.colBeforeShrink(ci, number);\n      },\n      redo: () => {\n        this.colBeforeExpand(ci, number);\n      },\n    };\n    snapshot.addAction(mergeAction);\n    mergeAction.redo();\n  }\n\n  /**\n   * 插入新行时调整区域大小和位置\n   * @param ri\n   * @param number\n   */\n  insertRowAfter(ri, number) {\n    const { snapshot } = this;\n    const mergeAction = {\n      undo: () => {\n        this.rowAfterShrink(ri, number);\n      },\n      redo: () => {\n        this.rowAfterExpand(ri, number);\n      },\n    };\n    snapshot.addAction(mergeAction);\n    mergeAction.redo();\n  }\n\n  /**\n   * 插入新行时调整区域大小和位置\n   * @param ri\n   * @param number\n   */\n  insertRowBefore(ri, number) {\n    const { snapshot } = this;\n    const mergeAction = {\n      undo: () => {\n        this.rowBeforeShrink(ri, number);\n      },\n      redo: () => {\n        this.rowBeforeExpand(ri, number);\n      },\n    };\n    snapshot.addAction(mergeAction);\n    mergeAction.redo();\n  }\n\n}\n\nexport {\n  Merges,\n};\n","/**\n * 数据快照\n */\nimport { Listen } from '../../../lib/Listen';\n\nclass Snapshot {\n\n  /**\n   * Snapshot\n   */\n  constructor() {\n    // 撤销\n    this.undoStack = [];\n    // 反撤销\n    this.redoStack = [];\n    // 当前记录层\n    this.layer = {\n      event: '',\n      data: [],\n    };\n    // 启用记录\n    this.apply = false;\n    // 数据监听\n    this.listen = new Listen();\n  }\n\n  /**\n   * 撤销\n   */\n  undo() {\n    const layer = this.undoStack.pop();\n    for (let i = layer.data.length - 1; i >= 0; i--) {\n      const action = layer.data[i];\n      action.undo();\n    }\n    this.redoStack.push(layer);\n    this.listen.execute('change', layer.event, 'undo');\n  }\n\n  /**\n   * 反撤销\n   */\n  redo() {\n    const layer = this.redoStack.pop();\n    for (let i = 0, len = layer.data.length; i < len; i++) {\n      const action = layer.data[i];\n      action.redo();\n    }\n    this.undoStack.push(layer);\n    this.listen.execute('change', layer.event, 'redo');\n  }\n\n  /**\n   * 打开快照\n   */\n  open() {\n    this.layer = {\n      event: '',\n      data: [],\n    };\n    this.apply = true;\n  }\n\n  /**\n   * 能否反撤销\n   * @returns {boolean}\n   */\n  canRedo() {\n    return this.redoStack.length > 0;\n  }\n\n  /**\n   * 能否撤销\n   * @returns {boolean}\n   */\n  canUndo() {\n    return this.undoStack.length > 0;\n  }\n\n  /**\n   * 关闭快照\n   */\n  close(event) {\n    if (this.layer.data.length) {\n      this.layer.event = event;\n      this.redoStack = [];\n      this.undoStack.push(this.layer);\n    }\n    this.layer = {\n      event: '',\n      data: [],\n    };\n    this.apply = false;\n    this.listen.execute('change', event, 'close');\n  }\n\n  /**\n   * 添加动作\n   * @param action\n   */\n  addAction(action = {\n    undo: () => {},\n    redo: () => {},\n  }) {\n    if (this.apply) {\n      this.layer.data.push(action);\n    }\n  }\n}\n\nexport {\n  Snapshot,\n};\n","import { Snapshot } from '../snapshot/Snapshot';\nimport { RectTree } from '../../../lib/recttree/RectTree';\nimport { Listen } from '../../../lib/Listen';\nimport { RtreeUtils } from '../../../utils/RtreeUtils';\nimport { SheetUtils } from '../../../utils/SheetUtils';\nimport { RectRange } from './RectRange';\n\n/**\n * RangeTree\n */\nclass RangeTree {\n\n  /**\n     * RangeTree 区域管理\n     */\n  constructor({\n    snapshot = new Snapshot(),\n  }) {\n    this.snapshot = snapshot;\n    this.rTree = new RectTree();\n    this.listen = new Listen();\n  }\n\n  /**\n     * 获取包含点的矩形区域\n     * @param ri\n     * @param ci\n     */\n  getFirstInclude(ri, ci) {\n    let { rTree } = this;\n    let bbox = {\n      minX: ci,\n      minY: ri,\n      maxX: ci,\n      maxY: ri,\n    };\n    let find = rTree.first(bbox);\n    if (find) {\n      return RtreeUtils.bboxToRange(find);\n    }\n    return SheetUtils.Undef;\n  }\n\n  /**\n   * 获取包含点的矩形区域\n   * @param ri\n   * @param ci\n   */\n  getMasterInclude(ri, ci) {\n    const find = this.getFirstInclude(ri, ci);\n    if (find.sri === ri) {\n      if (find.sci === ci) {\n        return find;\n      }\n    }\n    return SheetUtils.Undef;\n  }\n\n  /**\n     * 获取重合的区域\n     * @param rectRange\n     */\n  getIntersects(rectRange) {\n    let { rTree } = this;\n    let bbox = RtreeUtils.rangeToBbox(rectRange);\n    const array = rTree.search(bbox);\n    return array.map((bbox) => RtreeUtils.bboxToRange(bbox));\n  }\n\n  /**\n     * 添加矩形区域\n     * @param rectRange\n     */\n  push(rectRange) {\n    let { rTree } = this;\n    let bbox = RtreeUtils.rangeToBbox(rectRange);\n    rTree.insert(bbox);\n    return this;\n  }\n\n  /**\n     * 删除矩形区域\n     * @param rectRange\n     */\n  shift(rectRange) {\n    let { rTree } = this;\n    let bbox = RtreeUtils.rangeToBbox(rectRange);\n    let array = rTree.search(bbox);\n    for (let i = 0, len = array.length; i < len; i++) {\n      let item = array[i];\n      rTree.remove(item);\n    }\n    return this;\n  }\n\n  /**\n     * 添加矩形区域\n     * @param rectRange\n     */\n  add(rectRange) {\n    let { listen, snapshot } = this;\n    let action = {\n      undo: () => {\n        this.shift(rectRange);\n      },\n      redo: () => {\n        this.push(rectRange);\n        listen.execute('add', rectRange);\n      },\n    };\n    snapshot.addAction(action);\n    action.redo();\n  }\n\n  /**\n     * 删除矩形区域\n     * @param rectRange\n     */\n  delete(rectRange) {\n    let { listen, snapshot } = this;\n    let action = {\n      undo: () => {\n        this.push(rectRange);\n      },\n      redo: () => {\n        this.shift(rectRange);\n        listen.execute('delete', rectRange);\n      },\n    };\n    snapshot.addAction(action);\n    action.redo();\n  }\n\n  /**\n   * 删除矩形区域\n   * @param rectRanges\n   */\n  batchDelete(rectRanges) {\n    let { listen, snapshot } = this;\n    let action = {\n      undo: () => {\n        rectRanges.forEach((rectRange) => {\n          this.push(rectRange);\n        });\n      },\n      redo: () => {\n        rectRanges.forEach((rectRange) => {\n          this.shift(rectRange);\n        });\n        listen.execute('batchDelete', rectRanges);\n      },\n    };\n    snapshot.addAction(action);\n    action.redo();\n  }\n\n  /**\n     * 获取所有的矩形区域\n     */\n  getAll() {\n    let { rTree } = this;\n    return rTree.all().map((bbox) => RtreeUtils.bboxToRange(bbox));\n  }\n\n  /**\n     * 获取交叉矩形新区域\n     * @param rectRange\n     */\n  union(rectRange) {\n    let { rTree } = this;\n    let bbox = RtreeUtils.rangeToBbox(rectRange);\n    let array = rTree.search(bbox);\n    if (array.length === 0) {\n      return rectRange;\n    }\n    let clone = rectRange.clone();\n    for (let i = 0, len = array.length; i < len; i++) {\n      let range = RtreeUtils.bboxToRange(array[i]);\n      clone = clone.union(range);\n    }\n    if (!clone.equals(rectRange)) {\n      return this.union(clone);\n    }\n    return rectRange;\n  }\n\n  /**\n   * 获取整行区域\n   * @param ri\n   * @param number\n   * @returns {RectRange}\n   */\n  getFullRowRange(ri, number) {\n    return new RectRange(ri, 0, Math.max(ri, ri + number - 1), RangeTree.MAX_COL);\n  }\n\n  /**\n   * 获取整列区域\n   * @param ci\n   * @param number\n   * @returns {RectRange}\n   */\n  getFullColRange(ci, number) {\n    return new RectRange(0, ci, RangeTree.MAX_ROW, Math.max(ci, ci + number - 1));\n  }\n\n  /**\n     * 行扩展\n     * @param ri\n     * @param number\n     */\n  rowAfterExpand(ri, number) {\n    let bbox = {\n      minX: 0,\n      minY: ri,\n      maxX: RangeTree.MAX_COL,\n      maxY: RangeTree.MAX_ROW,\n    };\n    let { rTree } = this;\n    let array = rTree.search(bbox);\n    for (let i = 0, len = array.length; i < len; i++) {\n      let item = array[i];\n      rTree.remove(item);\n      if (item.minY > ri) {\n        item.minY += number;\n      }\n      if (item.maxY > ri) {\n        item.maxY += number;\n      }\n    }\n    rTree.load(array);\n  }\n\n  /**\n     * 列扩展\n     * @param ci\n     * @param number\n     */\n  colAfterExpand(ci, number) {\n    const bbox = {\n      minX: ci,\n      minY: 0,\n      maxX: RangeTree.MAX_COL,\n      maxY: RangeTree.MAX_ROW,\n    };\n    let { rTree } = this;\n    let array = rTree.search(bbox);\n    for (let i = 0, len = array.length; i < len; i++) {\n      let item = array[i];\n      rTree.remove(item);\n      if (item.minX > ci) {\n        item.minX += number;\n      }\n      if (item.maxX > ci) {\n        item.maxX += number;\n      }\n    }\n    rTree.load(array);\n  }\n\n  /**\n     * 行收缩\n     * @param ri\n     * @param number\n     */\n  rowAfterShrink(ri, number) {\n    let bbox = {\n      minX: 0,\n      minY: ri,\n      maxX: RangeTree.MAX_COL,\n      maxY: RangeTree.MAX_ROW,\n    };\n    let { rTree } = this;\n    let array = rTree.search(bbox);\n    for (let i = 0, len = array.length; i < len; i++) {\n      let item = array[i];\n      rTree.remove(item);\n      if (item.minY > ri) {\n        item.minY -= number;\n      }\n      if (item.maxY > ri) {\n        item.maxY -= number;\n      }\n    }\n    rTree.load(array);\n  }\n\n  /**\n     * 列收索\n     * @param ci\n     * @param number\n     */\n  colAfterShrink(ci, number) {\n    const bbox = {\n      minX: ci,\n      minY: 0,\n      maxX: RangeTree.MAX_COL,\n      maxY: RangeTree.MAX_ROW,\n    };\n    let { rTree } = this;\n    let array = rTree.search(bbox);\n    for (let i = 0, len = array.length; i < len; i++) {\n      let item = array[i];\n      rTree.remove(item);\n      if (item.minX > ci) {\n        item.minX -= number;\n      }\n      if (item.maxX > ci) {\n        item.maxX -= number;\n      }\n    }\n    rTree.load(array);\n  }\n\n  /**\n   * 行扩展\n   * @param ri\n   * @param number\n   */\n  rowBeforeExpand(ri, number) {\n    let bbox = {\n      minX: 0,\n      minY: ri,\n      maxX: RangeTree.MAX_COL,\n      maxY: RangeTree.MAX_ROW,\n    };\n    let { rTree } = this;\n    let array = rTree.search(bbox);\n    for (let i = 0, len = array.length; i < len; i++) {\n      let item = array[i];\n      rTree.remove(item);\n      if (item.minY >= ri) {\n        item.minY += number;\n      }\n      if (item.maxY >= ri) {\n        item.maxY += number;\n      }\n    }\n    rTree.load(array);\n  }\n\n  /**\n   * 列扩展\n   * @param ci\n   * @param number\n   */\n  colBeforeExpand(ci, number) {\n    const bbox = {\n      minX: ci,\n      minY: 0,\n      maxX: RangeTree.MAX_COL,\n      maxY: RangeTree.MAX_ROW,\n    };\n    let { rTree } = this;\n    let array = rTree.search(bbox);\n    for (let i = 0, len = array.length; i < len; i++) {\n      let item = array[i];\n      rTree.remove(item);\n      if (item.minX >= ci) {\n        item.minX += number;\n      }\n      if (item.maxX >= ci) {\n        item.maxX += number;\n      }\n    }\n    rTree.load(array);\n  }\n\n  /**\n   * 行收缩\n   * @param ri\n   * @param number\n   */\n  rowBeforeShrink(ri, number) {\n    let bbox = {\n      minX: 0,\n      minY: ri,\n      maxX: RangeTree.MAX_COL,\n      maxY: RangeTree.MAX_ROW,\n    };\n    let { rTree } = this;\n    let array = rTree.search(bbox);\n    for (let i = 0, len = array.length; i < len; i++) {\n      let item = array[i];\n      rTree.remove(item);\n      if (item.minY >= ri) {\n        item.minY -= number;\n      }\n      if (item.maxY >= ri) {\n        item.maxY -= number;\n      }\n    }\n    rTree.load(array);\n  }\n\n  /**\n   * 列收索\n   * @param ci\n   * @param number\n   */\n  colBeforeShrink(ci, number) {\n    const bbox = {\n      minX: ci,\n      minY: 0,\n      maxX: RangeTree.MAX_COL,\n      maxY: RangeTree.MAX_ROW,\n    };\n    let { rTree } = this;\n    let array = rTree.search(bbox);\n    for (let i = 0, len = array.length; i < len; i++) {\n      let item = array[i];\n      rTree.remove(item);\n      if (item.minX >= ci) {\n        item.minX -= number;\n      }\n      if (item.maxX >= ci) {\n        item.maxX -= number;\n      }\n    }\n    rTree.load(array);\n  }\n}\n\nRangeTree.MAX_COL = 1433;\nRangeTree.MAX_ROW = 1048576;\n\nexport {\n  RangeTree,\n};\n","import { SheetUtils } from '../../../utils/SheetUtils';\n\nclass RectRange {\n\n  /**\n   * RectRange\n   * @param {int} sri 起始行\n   * @param {int} sci 起始列\n   * @param {int} eri 结束行\n   * @param {int} eci 结束列\n   * @param {int} w 宽度\n   * @param {int} h 高度\n   */\n  constructor(sri, sci, eri, eci, w = 0, h = 0) {\n    this.sri = sri;\n    this.sci = sci;\n    this.eri = eri;\n    this.eci = eci;\n    this.w = w;\n    this.h = h;\n  }\n\n  /**\n   * 循环过滤指定的行列\n   * @param {XIteratorBuilder} iteratorBuilder 迭代器\n   * @param {Function} cb 回调函数\n   * @param {Function} rowFilter 过滤使用的回调函数\n   */\n  each(iteratorBuilder, cb, rowFilter = () => true) {\n    const {\n      sri, sci, eri, eci,\n    } = this;\n    let ret = false;\n    iteratorBuilder.getRowIterator()\n      .setBegin(sri)\n      .setEnd(eri)\n      .setLoop((i) => {\n        if (rowFilter(i)) {\n          iteratorBuilder.getColIterator()\n            .setBegin(sci)\n            .setEnd(eci)\n            .setLoop((j) => {\n              ret = cb(i, j);\n              return ret;\n            })\n            .execute();\n        }\n        return ret;\n      })\n      .execute();\n  }\n\n  /**\n   * 设置区域\n   * @param {int} sri 起始行\n   * @param {int} sci 起始列\n   * @param {int} eri 结束行\n   * @param {int} eci 结束列\n   */\n  set(sri, sci, eri, eci) {\n    this.sri = sri;\n    this.sci = sci;\n    this.eri = eri;\n    this.eci = eci;\n  }\n\n  /**\n   * 判断是否跨多个单元格\n   * @returns {boolean}\n   */\n  multiple() {\n    return this.eri - this.sri > 0 || this.eci - this.sci > 0;\n  }\n\n  /**\n   * 判断当前的区域是否包含指定的行和列\n   * 参数支持 ri, ci 和 A10 两种形式\n   * @param {[int, int] | String} args 行索引,列索引 或者 字符串\n   * @returns {boolean}\n   */\n  includes(...args) {\n    let [ri, ci] = [0, 0];\n    if (args.length === 1) {\n      [ci, ri] = SheetUtils.expr2xy(args[0]);\n    } else if (args.length === 2) {\n      [ri, ci] = args;\n    }\n    const {\n      sri, sci, eri, eci,\n    } = this;\n    return sri <= ri && ri <= eri && sci <= ci && ci <= eci;\n  }\n\n  /**\n   * 判断当前的区域是否包含指定的区域\n   * @param {RectRange} other 区域\n   * @returns {boolean}\n   */\n  contains(other) {\n    return this.sri <= other.sri\n      && this.sci <= other.sci\n      && this.eri >= other.eri\n      && this.eci >= other.eci;\n  }\n\n  /**\n   * 判断当前的区域是否被指定的区域包含\n   * @param {RectRange} other 区域\n   * @returns {boolean}\n   */\n  within(other) {\n    return this.sri >= other.sri\n      && this.sci >= other.sci\n      && this.eri <= other.eri\n      && this.eci <= other.eci;\n  }\n\n  /**\n   * 判断当前的区域和指定的区域不发生重合\n   * @param {RectRange} other 区域\n   * @returns {boolean}\n   */\n  disjoint(other) {\n    return this.sri > other.eri\n      || this.sci > other.eci\n      || other.sri > this.eri\n      || other.sci > this.eci;\n  }\n\n  /**\n   * 判断当前的区域和指定的区域发生重合\n   * @param {RectRange} other 区域\n   * @returns {boolean}\n   */\n  intersects(other) {\n    return this.sri <= other.eri\n      && this.sci <= other.eci\n      && other.sri <= this.eri\n      && other.sci <= this.eci;\n  }\n\n  /**\n   * 返回当前区域和指定区域合并后的新区域\n   * @param {RectRange} other 区域\n   * @returns {RectRange}\n   */\n  union(other) {\n    const {\n      sri, sci, eri, eci,\n    } = this;\n    return new RectRange(\n      other.sri < sri ? other.sri : sri,\n      other.sci < sci ? other.sci : sci,\n      other.eri > eri ? other.eri : eri,\n      other.eci > eci ? other.eci : eci,\n    );\n  }\n\n  /**\n   * 返回当前区域和指定区域合重合的新区域\n   * @param {RectRange} other\n   * @returns {RectRange}\n   */\n  coincide(other) {\n    const {\n      sri, sci, eri, eci,\n    } = this;\n    if (this.disjoint(other)) {\n      return RectRange.EMPTY;\n    }\n    return new RectRange(\n      other.sri > sri ? other.sri : sri,\n      other.sci > sci ? other.sci : sci,\n      other.eri < eri ? other.eri : eri,\n      other.eci < eci ? other.eci : eci,\n    );\n  }\n\n  /**\n   * 当前区域和指定区域重合\n   * 返回当前区域和指定区域不重合的部分\n   * @param {RectRange} other 区域\n   * @returns {Array}\n   */\n  coincideDifference(other) {\n    if (this.coincide(other).equals(RectRange.EMPTY)) {\n      return [];\n    }\n    return this.difference(other);\n  }\n\n  /**\n   * 返回当前区域和指定区域不重合的部分\n   * @param {RectRange} other 区域\n   * @returns {Array}\n   */\n  difference(other) {\n    const ret = [];\n    const addRet = (sri, sci, eri, eci) => {\n      ret.push(new RectRange(sri, sci, eri, eci));\n    };\n    const { sri, sci, eri, eci } = this;\n    const dsr = other.sri - sri;\n    const dsc = other.sci - sci;\n    const der = eri - other.eri;\n    const dec = eci - other.eci;\n    if (dsr > 0) {\n      addRet(sri, sci, other.sri - 1, eci);\n      if (der > 0) {\n        addRet(other.eri + 1, sci, eri, eci);\n        if (dsc > 0) {\n          addRet(other.sri, sci, other.eri, other.sci - 1);\n        }\n        if (dec > 0) {\n          addRet(other.sri, other.eci + 1, other.eri, eci);\n        }\n      } else {\n        if (dsc > 0) {\n          addRet(other.sri, sci, eri, other.sci - 1);\n        }\n        if (dec > 0) {\n          addRet(other.sri, other.eci + 1, eri, eci);\n        }\n      }\n    } else if (der > 0) {\n      addRet(other.eri + 1, sci, eri, eci);\n      if (dsc > 0) {\n        addRet(sri, sci, other.eri, other.sci - 1);\n      }\n      if (dec > 0) {\n        addRet(sri, other.eci + 1, other.eri, eci);\n      }\n    }\n    if (dsc > 0) {\n      addRet(sri, sci, eri, other.sci - 1);\n      if (dec > 0) {\n        addRet(sri, other.eri + 1, eri, eci);\n        if (dsr > 0) {\n          addRet(sri, other.sci, other.sri - 1, other.eci);\n        }\n        if (der > 0) {\n          addRet(other.sri + 1, other.sci, eri, other.eci);\n        }\n      } else {\n        if (dsr > 0) {\n          addRet(sri, other.sci, other.sri - 1, eci);\n        }\n        if (der > 0) {\n          addRet(other.sri + 1, other.sci, eri, eci);\n        }\n      }\n    } else if (dec > 0) {\n      addRet(sri, other.eci + 1, eri, eci);\n      if (dsr > 0) {\n        addRet(sri, sci, other.sri - 1, other.eci);\n      }\n      if (der > 0) {\n        addRet(other.eri + 1, sci, eri, other.eci);\n      }\n    }\n    return ret;\n  }\n\n  /**\n   * 当前区域跨的行列数\n   * @returns {number[]}\n   */\n  size() {\n    return [\n      this.eri - this.sri + 1,\n      this.eci - this.sci + 1,\n    ];\n  }\n\n  /**\n   * 返回边缘区域\n   * @returns {{top: RectRange, left: RectRange, bottom: RectRange, right: RectRange}}\n   */\n  brink() {\n    const { sri, eri, sci, eci } = this;\n    const top = new RectRange(sri, sci, sri, eci);\n    const bottom = new RectRange(eri, sci, eri, eci);\n    const right = new RectRange(sri, eci, eri, eci);\n    const left = new RectRange(sri, sci, eri, sci);\n    return { top, right, bottom, left };\n  }\n\n  /**\n   * 方位点\n   * @returns {{rb: RectRange, rt: RectRange, lb: RectRange, lt: RectRange}}\n   */\n  point() {\n    const { sri, eri, sci, eci } = this;\n    const lt = new RectRange(sri, sci, sri, sci);\n    const rt = new RectRange(sri, eci, sri, eci);\n    const lb = new RectRange(eri, sci, eri, sci);\n    const rb = new RectRange(eri, eci, eri, eci);\n    return { lt, rt, lb, rb };\n  }\n\n  /**\n   * equals\n   * @param {RectRange} other 区域\n   * @returns {boolean}\n   */\n  equals(other) {\n    return this.eri === other.eri\n      && this.eci === other.eci\n      && this.sri === other.sri\n      && this.sci === other.sci;\n  }\n\n  /**\n   * 克隆\n   * @returns {RectRange}\n   */\n  clone() {\n    const {\n      sri, sci, eri, eci, w, h,\n    } = this;\n    return new RectRange(sri, sci, eri, eci, w, h);\n  }\n\n  toString() {\n    const {\n      sri, sci, eri, eci,\n    } = this;\n    let ref = SheetUtils.xy2expr(sci, sri);\n    if (this.multiple()) {\n      ref = `${ref}:${SheetUtils.xy2expr(eci, eri)}`;\n    }\n    return ref;\n  }\n\n  /**\n   * 将 B1:B8 或者 B1 参数转换成新的区域\n   * @param {String} ref 行列字符串\n   * @returns {RectRange}\n   */\n  static valueOf(ref) {\n    const refs = ref.split(':');\n    const [sci, sri] = SheetUtils.expr2xy(refs[0]);\n    let [eri, eci] = [sri, sci];\n    if (refs.length > 1) {\n      [eci, eri] = SheetUtils.expr2xy(refs[1]);\n    }\n    return new RectRange(sri, sci, eri, eci);\n  }\n}\n\nRectRange.EMPTY = new RectRange(-1, -1, -1, -1);\n\nexport { RectRange };\n","import { Cell } from './Cell';\nimport { SheetUtils } from '../../../utils/SheetUtils';\nimport { Listen } from '../../../lib/Listen';\nimport { Merges } from '../merges/Merges';\nimport { Snapshot } from '../snapshot/Snapshot';\n\nclass Items {\n\n  constructor({ data = [] }) {\n    this.data = data;\n  }\n\n  getItems(ri) {\n    let { data } = this;\n    return data[ri];\n  }\n\n  clear(rectRange, { ignoreCorner = false } = {}) {\n    let { sri, eri } = rectRange;\n    let { sci, eci } = rectRange;\n    let { data } = this;\n    let { snapshot } = this;\n    let { length } = data;\n    let oldItems = [];\n    let effRiLength = eri - sri + 1;\n    let effCiLength = eci - sci + 1;\n    let action = {\n      undo: () => {\n        for (let ri = sri; ri <= eri; ri++) {\n          if (ri >= length) {\n            break;\n          }\n          let oldRowItem = oldItems[ri];\n          let rowItem = data[ri];\n          if (rowItem) {\n            for (let ci = sci; ci <= eci; ci++) {\n              if (ci >= length) {\n                break;\n              }\n              if (ignoreCorner) {\n                let firstRi = ri === sri;\n                let firstCi = ci === sci;\n                if (firstRi && firstCi) {\n                  continue;\n                }\n                rowItem[ci] = oldRowItem[ci];\n              } else {\n                rowItem[ci] = oldRowItem[ci];\n              }\n            }\n          }\n        }\n      },\n      redo: () => {\n        oldItems = new Array(effRiLength);\n        for (let ri = sri; ri <= eri; ri++) {\n          if (ri >= length) {\n            break;\n          }\n          let rowItem = data[ri];\n          if (rowItem) {\n            let oldRowItem = new Array(effCiLength);\n            let { length } = rowItem;\n            for (let ci = sci; ci <= eci; ci++) {\n              if (ci >= length) {\n                break;\n              }\n              if (ignoreCorner) {\n                let firstRi = ri === sri;\n                let firstCi = ci === sci;\n                if (firstRi && firstCi) {\n                  continue;\n                }\n                oldRowItem[ci] = rowItem[ci];\n                rowItem[ci] = undefined;\n              } else {\n                oldRowItem[ci] = rowItem[ci];\n                rowItem[ci] = undefined;\n              }\n            }\n            oldItems[ri] = oldRowItem;\n          }\n        }\n      },\n    };\n    snapshot.addAction(action);\n    action.redo();\n  }\n\n  shift() {\n    return this.data.shift();\n  }\n\n  slice(sri, sci, eri, eci) {\n    const rows = this.data.slice(sri, eri + 1);\n    return rows.map((row) => {\n      if (row) {\n        return row.slice(sci, eci + 1);\n      }\n      return row;\n    });\n  }\n\n  getData() {\n    return this.data;\n  }\n\n  getLength() {\n    return this.data.length;\n  }\n\n  hasItems(ri) {\n    return SheetUtils.isDef(this.getItems(ri));\n  }\n\n  getItemsOrNew(ri) {\n    let { data } = this;\n    let items = data[ri];\n    if (SheetUtils.isUnDef(items)) {\n      items = [];\n      data[ri] = items;\n    }\n    return items;\n  }\n\n}\n\nclass Cells extends Items {\n\n  static wrapCell(item) {\n    if (item instanceof Cell) {\n      return item;\n    }\n\n    if (SheetUtils.isString(item)) {\n      let config = { text: item };\n      return new Cell(config);\n    }\n    if (SheetUtils.isDef(item)) {\n      let config = item.cell ? item.cell : item;\n      return new Cell(config);\n    }\n\n    return item;\n  }\n\n  constructor({\n    snapshot = new Snapshot(),\n    data = [],\n    merges = new Merges(),\n  } = {}) {\n    super({ data });\n    this.snapshot = snapshot;\n    this.merges = merges;\n    this.listen = new Listen();\n  }\n\n  getCellOrNew(ri, ci) {\n    if (ri < 0) {\n      throw new TypeError(`错误的行号${ri}`);\n    }\n    if (ci < 0) {\n      throw new TypeError(`错误的列号${ci}`);\n    }\n    let cell = this.getCell(ri, ci);\n    if (SheetUtils.isUnDef(cell)) {\n      let items = this.getItemsOrNew(ri);\n      cell = new Cell();\n      items[ci] = cell;\n    }\n    return cell;\n  }\n\n  getCell(ri, ci) {\n    let { data } = this;\n    let items = data[ri];\n    if (items) {\n      const wrap = Cells.wrapCell(items[ci]);\n      items[ci] = wrap;\n      return wrap;\n    }\n    return SheetUtils.Undef;\n  }\n\n  each(callback) {\n    const { data } = this;\n    for (let i = 0, len = data.length; i < len; i++) {\n      let items = data[i];\n      if (items) {\n        for (let j = 0, len = items.length; j < len; j++) {\n          let cell = this.getCell(i, j);\n          callback(cell);\n        }\n      }\n    }\n  }\n\n  getCellOrMergeCell(ri, ci) {\n    const { merges } = this;\n    const merge = merges.getFirstInclude(ri, ci);\n    if (merge) {\n      return this.getCell(merge.sri, merge.sci);\n    }\n    return this.getCell(ri, ci);\n  }\n\n  hasCell(ri, ci) {\n    return SheetUtils.isDef(this.getCell(ri, ci));\n  }\n\n  setCell(ri, ci, cell) {\n    if (ri < 0) {\n      throw new TypeError(`错误的行号${ri}`);\n    }\n    if (ci < 0) {\n      throw new TypeError(`错误的列号${ci}`);\n    }\n    let { listen, snapshot } = this;\n    let oldValue = this.getCell(ri, ci);\n    if (oldValue) {\n      let action = {\n        undo: () => {\n          const items = this.getItems(ri);\n          items[ci] = oldValue;\n          listen.execute('change', {\n            ri, ci, oldValue,\n          });\n        },\n        redo: () => {\n          const items = this.getItemsOrNew(ri);\n          items[ci] = cell;\n          listen.execute('change', {\n            ri, ci, oldValue,\n          });\n        },\n      };\n      snapshot.addAction(action);\n      action.redo();\n    }\n  }\n\n  setCellOrNew(ri, ci, cell) {\n    if (ri < 0) {\n      throw new TypeError(`错误的行号${ri}`);\n    }\n    if (ci < 0) {\n      throw new TypeError(`错误的列号${ci}`);\n    }\n    let { listen, snapshot } = this;\n    let hasCell = this.hasCell(ri, ci);\n    let hasItems = this.hasItems(ri);\n    let oldValue = this.getCell(ri, ci);\n    let action = {\n      undo: () => {\n        if (hasItems) {\n          const items = this.getItems(ri);\n          if (hasCell) {\n            items[ci] = oldValue;\n          } else {\n            items.splice(ci, 1);\n          }\n          listen.execute('change', {\n            ri, ci, oldValue,\n          });\n        } else {\n          const data = this.getData();\n          data.splice(ri, 1);\n          listen.execute('change', {\n            ri, ci, oldValue,\n          });\n        }\n      },\n      redo: () => {\n        if (hasItems) {\n          const items = this.getItems(ri);\n          items[ci] = cell;\n          listen.execute('change', {\n            ri, ci, oldValue,\n          });\n        } else {\n          const items = this.getItemsOrNew(ri);\n          items[ci] = cell;\n          listen.execute('change', {\n            ri, ci, oldValue,\n          });\n        }\n      },\n    };\n    snapshot.addAction(action);\n    action.redo();\n  }\n\n  removeRow(ri) {\n    let { snapshot } = this;\n    let orderValue;\n    let action = {\n      undo: () => {\n        if (orderValue) {\n          this.data.splice(ri, 0, orderValue);\n        }\n      },\n      redo: () => {\n        orderValue = this.data.splice(ri, 1)[0];\n      },\n    };\n    snapshot.addAction(action);\n    action.redo();\n  }\n\n  removeCol(ci) {\n    let { snapshot } = this;\n    let orderValue = [];\n    let action = {\n      undo: () => {\n        let { length } = orderValue;\n        for (let i = 0; i < length; i++) {\n          const value = orderValue[i];\n          const { ri, item } = value;\n          const items = this.data[ri];\n          items.splice(ci, 0, item);\n        }\n      },\n      redo: () => {\n        let { length } = this.data;\n        orderValue = [];\n        for (let ri = 0; ri < length; ri++) {\n          const items = this.data[ri];\n          if (items) {\n            const item = items.splice(ci, 1)[0];\n            orderValue.push({ ri, item });\n          }\n        }\n      },\n    };\n    snapshot.addAction(action);\n    action.redo();\n  }\n\n  copyRowStyle(ri) {\n    let row = this.data[ri];\n    let copy = [];\n    if (row) {\n      for (let i = 0, len = row.length; i < len; i++) {\n        let cell = row[i];\n        if (cell) {\n          copy[i] = this.getCell(ri, i).cloneStyle();\n        }\n      }\n    }\n    return copy;\n  }\n\n  insertRowAfter(ri) {\n    let { snapshot } = this;\n    let master = ri + 1;\n    let action = {\n      undo: () => {\n        this.data.splice(master, 1);\n      },\n      redo: () => {\n        const copy = this.copyRowStyle(master);\n        this.data.splice(master, 0, copy);\n      },\n    };\n    snapshot.addAction(action);\n    action.redo();\n  }\n\n  insertColAfter(ci) {\n    let { snapshot } = this;\n    let master = ci + 1;\n    let action = {\n      undo: () => {\n        for (let i = 0, len = this.data.length; i < len; i++) {\n          const items = this.data[i];\n          if (items) {\n            items.splice(master, 1);\n          }\n        }\n      },\n      redo: () => {\n        for (let i = 0, len = this.data.length; i < len; i++) {\n          const items = this.data[i];\n          if (items) {\n            const cell = this.getCell(i, master);\n            const copy = cell ? cell.cloneStyle() : undefined;\n            items.splice(master, 0, copy);\n          }\n        }\n      },\n    };\n    snapshot.addAction(action);\n    action.redo();\n  }\n\n  insertRowBefore(ri) {\n    let { snapshot } = this;\n    let master = ri;\n    let action = {\n      undo: () => {\n        this.data.splice(master, 1);\n      },\n      redo: () => {\n        const copy = this.copyRowStyle(master);\n        this.data.splice(master, 0, copy);\n      },\n    };\n    snapshot.addAction(action);\n    action.redo();\n  }\n\n  insertColBefore(ci) {\n    let { snapshot } = this;\n    let master = ci;\n    let action = {\n      undo: () => {\n        for (let i = 0, len = this.data.length; i < len; i++) {\n          const items = this.data[i];\n          if (items) {\n            items.splice(master, 1);\n          }\n        }\n      },\n      redo: () => {\n        for (let i = 0, len = this.data.length; i < len; i++) {\n          const items = this.data[i];\n          if (items) {\n            const cell = this.getCell(i, master);\n            const copy = cell ? cell.cloneStyle() : undefined;\n            items.splice(master, 0, copy);\n          }\n        }\n      },\n    };\n    snapshot.addAction(action);\n    action.redo();\n  }\n\n}\n\nexport {\n  Cells,\n};\n","class Listen {\n\n  constructor() {\n    this.pool = {};\n  }\n\n  clear() {\n    Object.keys((key) => {\n      delete this.pool[key];\n    });\n  }\n\n  removeListen(key) {\n    delete this.pool[key];\n  }\n\n  registerListen(key, call) {\n    this.pool[key] = call;\n  }\n\n  execute(key, ...message) {\n    if (this.pool[key]) {\n      this.pool[key](...message);\n    }\n  }\n\n}\n\nexport {\n  Listen,\n};\n","function Compare(a, b) {\n  return a < b ? -1 : a > b ? 1 : 0;\n}\n\nfunction Swap(arr, i, j) {\n  let tmp = arr[i];\n  arr[i] = arr[j];\n  arr[j] = tmp;\n}\n\nfunction QStep(arr, k, left, right, compare) {\n  while (right > left) {\n    if (right - left > 600) {\n      let n = right - left + 1;\n      let m = k - left + 1;\n      let z = Math.log(n);\n      let s = 0.5 * Math.exp(2 * z / 3);\n      let sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);\n      let newLeft = Math.max(left, Math.floor(k - m * s / n + sd));\n      let newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));\n      QStep(arr, k, newLeft, newRight, compare);\n    }\n\n    let t = arr[k];\n    let i = left;\n    let j = right;\n\n    Swap(arr, left, k);\n    if (compare(arr[right], t) > 0) Swap(arr, left, right);\n\n    while (i < j) {\n      Swap(arr, i, j);\n      i++;\n      j--;\n      while (compare(arr[i], t) < 0) i++;\n      while (compare(arr[j], t) > 0) j--;\n    }\n\n    if (compare(arr[left], t) === 0) Swap(arr, left, j);\n    else {\n      j++;\n      Swap(arr, j, right);\n    }\n\n    if (j <= k) left = j + 1;\n    if (k <= j) right = j - 1;\n  }\n}\n\nfunction QkSelect(arr, k, left, right, compare) {\n  QStep(arr, k, left || 0, right || (arr.length - 1), compare || Compare);\n}\n\nexport {\n  QkSelect,\n};\n","import { QkSelect } from './QkSelect';\n\nfunction findItem(item, items, equalsFn) {\n  if (!equalsFn) {\n    return items.indexOf(item);\n  }\n  for (let i = 0; i < items.length; i++) {\n    if (equalsFn(item, items[i])) return i;\n  }\n  return -1;\n}\nfunction extend(a, b) {\n  a.minX = Math.min(a.minX, b.minX);\n  a.minY = Math.min(a.minY, b.minY);\n  a.maxX = Math.max(a.maxX, b.maxX);\n  a.maxY = Math.max(a.maxY, b.maxY);\n  return a;\n}\nfunction compareNodeMinX(a, b) {\n  return a.minX - b.minX;\n}\nfunction compareNodeMinY(a, b) {\n  return a.minY - b.minY;\n}\nfunction bboxArea(a) {\n  return (a.maxX - a.minX) * (a.maxY - a.minY);\n}\nfunction bboxMargin(a) {\n  return (a.maxX - a.minX) + (a.maxY - a.minY);\n}\nfunction enlargedArea(a, b) {\n  return (Math.max(b.maxX, a.maxX) - Math.min(b.minX, a.minX)) * (Math.max(b.maxY, a.maxY) - Math.min(b.minY, a.minY));\n}\nfunction intersectionArea(a, b) {\n  const minX = Math.max(a.minX, b.minX);\n  const minY = Math.max(a.minY, b.minY);\n  const maxX = Math.min(a.maxX, b.maxX);\n  const maxY = Math.min(a.maxY, b.maxY);\n  return Math.max(0, maxX - minX) * Math.max(0, maxY - minY);\n}\nfunction contains(a, b) {\n  return a.minX <= b.minX && a.minY <= b.minY && b.maxX <= a.maxX && b.maxY <= a.maxY;\n}\nfunction intersects(a, b) {\n  return b.minX <= a.maxX && b.minY <= a.maxY && b.maxX >= a.minX && b.maxY >= a.minY;\n}\nfunction createNode(childrenNodes) {\n  return {\n    childrenNodes,\n    height: 1,\n    leaf: true,\n    minX: Infinity,\n    minY: Infinity,\n    maxX: -Infinity,\n    maxY: -Infinity,\n  };\n}\nfunction distBBox(node, k, p, toBBox, destNode) {\n  // 从 k 到 p-1 的节点子节点的最小边界矩形\n  if (!destNode) destNode = createNode(null);\n  destNode.minX = Infinity;\n  destNode.minY = Infinity;\n  destNode.maxX = -Infinity;\n  destNode.maxY = -Infinity;\n  for (let i = k; i < p; i++) {\n    const child = node.childrenNodes[i];\n    extend(destNode, node.leaf ? toBBox(child) : child);\n  }\n  return destNode;\n}\nfunction calcBBox(node, toBBox) {\n  // 从其子节点的框计算节点框\n  distBBox(node, 0, node.childrenNodes.length, toBBox, node);\n}\nfunction multiSelect(arr, left, right, n, compare) {\n  // 对数组进行排序，以便项目以 n 个未排序项目为一组，各组在彼此之间排序；\n  // 将选择算法与二元分治法相结合\n  const stack = [left, right];\n  while (stack.length) {\n    right = stack.pop();\n    left = stack.pop();\n    if (right - left <= n) continue;\n    const mid = left + Math.ceil((right - left) / n / 2) * n;\n    QkSelect(arr, mid, left, right, compare);\n    stack.push(left, mid, mid, right);\n  }\n}\n\nclass RectTree {\n  constructor(maxEntries = 9) {\n    // 默认情况下，节点中的最大条目数为 9； 最小节点填充为 40% 以获得最佳性能\n    this._maxEntries = Math.max(4, maxEntries);\n    this._minEntries = Math.max(2, Math.ceil(this._maxEntries * 0.4));\n    this.clear();\n  }\n\n  all() {\n    return this._all(this.data, []);\n  }\n\n  search(bbox) {\n    let node = this.data;\n    const result = [];\n\n    if (!intersects(bbox, node)) {\n      return result;\n    }\n\n    const toBBox = this.toBBox;\n    const nodesToSearch = [];\n\n    while (node) {\n      for (let i = 0; i < node.childrenNodes.length; i++) {\n        const child = node.childrenNodes[i];\n        const childBBox = node.leaf ? toBBox(child) : child;\n        if (intersects(bbox, childBBox)) {\n          if (node.leaf) result.push(child);\n          else if (contains(bbox, childBBox)) this._all(child, result);\n          else nodesToSearch.push(child);\n        }\n      }\n      node = nodesToSearch.pop();\n    }\n\n    return result;\n  }\n\n  first(bbox) {\n    return this.search(bbox)[0];\n  }\n\n  collides(bbox) {\n    let node = this.data;\n\n    if (!intersects(bbox, node)) {\n      return false;\n    }\n\n    const nodesToSearch = [];\n    while (node) {\n      for (let i = 0; i < node.childrenNodes.length; i++) {\n        const child = node.childrenNodes[i];\n        const childBBox = node.leaf ? this.toBBox(child) : child;\n        if (intersects(bbox, childBBox)) {\n          if (node.leaf || contains(bbox, childBBox)) return true;\n          nodesToSearch.push(child);\n        }\n      }\n      node = nodesToSearch.pop();\n    }\n\n    return false;\n  }\n\n  load(data) {\n    if (!(data && data.length)) {\n      return this;\n    }\n\n    if (data.length < this._minEntries) {\n      for (let i = 0; i < data.length; i++) {\n        this.insert(data[i]);\n      }\n      return this;\n    }\n\n    // 使用 OMT 算法从头开始使用给定数据递归构建树\n    let node = this._build(data.slice(), 0, data.length - 1, 0);\n\n    if (!this.data.childrenNodes.length) {\n      // 如果树为空，则按原样保存\n      this.data = node;\n    } else if (this.data.height === node.height) {\n      // 如果树具有相同的高度，则拆分根\n      this._splitRoot(this.data, node);\n    } else {\n      if (this.data.height < node.height) {\n        // 如果插入的树更大，则交换树\n        const tmpNode = this.data;\n        this.data = node;\n        node = tmpNode;\n      }\n      // 将小树插入大树中适当的层次\n      this._insert(node, this.data.height - node.height - 1, true);\n    }\n\n    return this;\n  }\n\n  insert(item) {\n    if (item) {\n      this._insert(item, this.data.height - 1);\n    }\n    return this;\n  }\n\n  clear() {\n    this.data = createNode([]);\n    return this;\n  }\n\n  remove(item, equalsFn) {\n    if (!item) {\n      return this;\n    }\n\n    let node = this.data;\n    const bbox = this.toBBox(item);\n    const path = [];\n    const indexes = [];\n    let i;\n    let parent;\n    let goingUp;\n\n    // 深度优先迭代树遍历\n    while (node || path.length) {\n      if (!node) {\n        // 往上\n        node = path.pop();\n        parent = path[path.length - 1];\n        i = indexes.pop();\n        goingUp = true;\n      }\n\n      if (node.leaf) {\n        // 检查当前节点\n        const index = findItem(item, node.childrenNodes, equalsFn);\n        if (index !== -1) {\n          // 找到项目，移除项目并向上压缩树\n          node.childrenNodes.splice(index, 1);\n          path.push(node);\n          this._condense(path);\n          return this;\n        }\n      }\n\n      if (!goingUp && !node.leaf && contains(node, bbox)) {\n        // 往下\n        path.push(node);\n        indexes.push(i);\n        i = 0;\n        parent = node;\n        node = node.childrenNodes[0];\n      } else if (parent) {\n        // 向右走\n        i++;\n        node = parent.childrenNodes[i];\n        goingUp = false;\n      } else {\n        // 没有发现\n        node = null;\n      }\n    }\n\n    return this;\n  }\n\n  toBBox(item) {\n    return item;\n  }\n\n  compareMinX(a, b) {\n    return a.minX - b.minX;\n  }\n\n  compareMinY(a, b) {\n    return a.minY - b.minY;\n  }\n\n  _all(node, result) {\n    const nodesToSearch = [];\n    while (node) {\n      if (node.leaf) {\n        result.push(...node.childrenNodes);\n      } else {\n        nodesToSearch.push(...node.childrenNodes);\n      }\n      node = nodesToSearch.pop();\n    }\n    return result;\n  }\n\n  _build(items, left, right, height) {\n    const N = right - left + 1;\n    let M = this._maxEntries;\n    let node;\n\n    if (N <= M) {\n      // 达到叶级； 回叶\n      node = createNode(items.slice(left, right + 1));\n      calcBBox(node, this.toBBox);\n      return node;\n    }\n\n    if (!height) {\n      // 散装树的目标高度\n      height = Math.ceil(Math.log(N) / Math.log(M));\n      // 目标根条目数以最大限度地提高存储利用率\n      M = Math.ceil(N / M ** (height - 1));\n    }\n\n    node = createNode([]);\n    node.leaf = false;\n    node.height = height;\n\n    // 将项目分成 M 个主要为方形的元素\n    const N2 = Math.ceil(N / M);\n    const N1 = N2 * Math.ceil(Math.sqrt(M));\n\n    multiSelect(items, left, right, N1, this.compareMinX);\n\n    for (let i = left; i <= right; i += N1) {\n      const right2 = Math.min(i + N1 - 1, right);\n      multiSelect(items, i, right2, N2, this.compareMinY);\n      for (let j = i; j <= right2; j += N2) {\n        const right3 = Math.min(j + N2 - 1, right2);\n        // 递归地打包每个条目\n        node.childrenNodes.push(this._build(items, j, right3, height - 1));\n      }\n    }\n\n    calcBBox(node, this.toBBox);\n\n    return node;\n  }\n\n  _chooseSubtree(bbox, node, level, path) {\n    while (true) {\n      path.push(node);\n\n      if (node.leaf || path.length - 1 === level) {\n        break;\n      }\n\n      let minArea = Infinity;\n      let minEnlargement = Infinity;\n      let targetNode;\n\n      for (let i = 0; i < node.childrenNodes.length; i++) {\n        const child = node.childrenNodes[i];\n        const area = bboxArea(child);\n        const enlargement = enlargedArea(bbox, child) - area;\n\n        // 选择最小面积扩大的入口\n        if (enlargement < minEnlargement) {\n          minEnlargement = enlargement;\n          minArea = area < minArea ? area : minArea;\n          targetNode = child;\n        } else if (enlargement === minEnlargement) {\n          // 否则选择面积最小的一个\n          if (area < minArea) {\n            minArea = area;\n            targetNode = child;\n          }\n        }\n      }\n\n      node = targetNode || node.childrenNodes[0];\n    }\n\n    return node;\n  }\n\n  _insert(item, level, isNode) {\n    const bbox = isNode ? item : this.toBBox(item);\n    const insertPath = [];\n\n    // 找到容纳物品的最佳节点，同时保存路径上的所有节点\n    const node = this._chooseSubtree(bbox, this.data, level, insertPath);\n\n    // 将项目放入节点\n    node.childrenNodes.push(item);\n    extend(node, bbox);\n\n    // 节点溢出时分裂； 必要时向上传播\n    while (level >= 0) {\n      if (insertPath[level].childrenNodes.length > this._maxEntries) {\n        this._split(insertPath, level);\n        level--;\n      } else {\n        break;\n      }\n    }\n\n    // 沿插入路径调整 bboxes\n    this._adjustParentBBoxes(bbox, insertPath, level);\n  }\n\n  // 将溢出的节点一分为二\n  _split(insertPath, level) {\n    const node = insertPath[level];\n    const M = node.childrenNodes.length;\n    const m = this._minEntries;\n\n    this._chooseSplitAxis(node, m, M);\n\n    const splitIndex = this._chooseSplitIndex(node, m, M);\n\n    const newNode = createNode(node.childrenNodes.splice(splitIndex, node.childrenNodes.length - splitIndex));\n    newNode.height = node.height;\n    newNode.leaf = node.leaf;\n\n    calcBBox(node, this.toBBox);\n    calcBBox(newNode, this.toBBox);\n\n    if (level) {\n      insertPath[level - 1].childrenNodes.push(newNode);\n    } else {\n      this._splitRoot(node, newNode);\n    }\n  }\n\n  _splitRoot(node, newNode) {\n    // 分裂根节点\n    this.data = createNode([node, newNode]);\n    this.data.height = node.height + 1;\n    this.data.leaf = false;\n    calcBBox(this.data, this.toBBox);\n  }\n\n  _chooseSplitIndex(node, m, M) {\n    let index;\n    let minOverlap = Infinity;\n    let minArea = Infinity;\n\n    for (let i = m; i <= M - m; i++) {\n      const bbox1 = distBBox(node, 0, i, this.toBBox);\n      const bbox2 = distBBox(node, i, M, this.toBBox);\n\n      const overlap = intersectionArea(bbox1, bbox2);\n      const area = bboxArea(bbox1) + bboxArea(bbox2);\n\n      // 选择重叠最小的分布\n      if (overlap < minOverlap) {\n        minOverlap = overlap;\n        index = i;\n        minArea = area < minArea ? area : minArea;\n      } else if (overlap === minOverlap) {\n        // 否则选择面积最小的分布\n        if (area < minArea) {\n          minArea = area;\n          index = i;\n        }\n      }\n    }\n\n    return index || M - m;\n  }\n\n  // 按最佳轴对节点子节点进行排序以进行拆分\n  _chooseSplitAxis(node, m, M) {\n    const compareMinX = node.leaf ? this.compareMinX : compareNodeMinX;\n    const compareMinY = node.leaf ? this.compareMinY : compareNodeMinY;\n    const xMargin = this._allDistMargin(node, m, M, compareMinX);\n    const yMargin = this._allDistMargin(node, m, M, compareMinY);\n    // 如果 x 的总分配边际值最小，则按 minX 排序,\n    // 否则它已经按 minY 排序\n    if (xMargin < yMargin) {\n      node.childrenNodes.sort(compareMinX);\n    }\n  }\n\n  // 所有可能的分割分布的总边际，其中每个节点至少是 m 满\n  _allDistMargin(node, m, M, compare) {\n    node.childrenNodes.sort(compare);\n\n    const toBBox = this.toBBox;\n    const leftBBox = distBBox(node, 0, m, toBBox);\n    const rightBBox = distBBox(node, M - m, M, toBBox);\n    let margin = bboxMargin(leftBBox) + bboxMargin(rightBBox);\n\n    for (let i = m; i < M - m; i++) {\n      const child = node.childrenNodes[i];\n      extend(leftBBox, node.leaf ? toBBox(child) : child);\n      margin += bboxMargin(leftBBox);\n    }\n\n    for (let i = M - m - 1; i >= m; i--) {\n      const child = node.childrenNodes[i];\n      extend(rightBBox, node.leaf ? toBBox(child) : child);\n      margin += bboxMargin(rightBBox);\n    }\n\n    return margin;\n  }\n\n  _adjustParentBBoxes(bbox, path, level) {\n    // 沿给定的树路径调整 bbox\n    for (let i = level; i >= 0; i--) {\n      extend(path[i], bbox);\n    }\n  }\n\n  _condense(path) {\n    // 遍历路径，删除空节点并更新 bboxes\n    for (let i = path.length - 1, siblings; i >= 0; i--) {\n      if (path[i].childrenNodes.length === 0) {\n        if (i > 0) {\n          siblings = path[i - 1].childrenNodes;\n          siblings.splice(siblings.indexOf(path[i]), 1);\n        } else {\n          this.clear();\n        }\n      } else {\n        calcBBox(path[i], this.toBBox);\n      }\n    }\n  }\n}\n\nexport {\n  RectTree,\n};\n","import { RectRange } from '../core/table/tablebase/RectRange';\n\nclass RtreeUtils {\n\n  static bboxToRange(bbox) {\n    return new RectRange(bbox.minY, bbox.minX, bbox.maxY, bbox.maxX);\n  }\n\n  static rangeToBbox(range) {\n    return {\n      minX: range.sci,\n      minY: range.sri,\n      maxX: range.eci,\n      maxY: range.eri,\n    };\n  }\n\n}\n\nexport {\n  RtreeUtils,\n};\n"],"names":["Merges","constructor","snapshot","merges","super","map","merge","forEach","view","this","add","getData","getAll","range","toString","removeRow","ri","number","rTree","footRange","fullRange","getFullRowRange","fullBbox","footBbox","divers","search","mergeAction","undo","length","i","item","remove","load","redo","clone","minY","maxY","diffMax","oldMax","style","maxX","minX","push","diffMin","oldMin","diffValue","addAction","removeCol","ci","getFullColRange","insertColAfter","colAfterShrink","colAfterExpand","insertColBefore","colBeforeShrink","colBeforeExpand","insertRowAfter","rowAfterShrink","rowAfterExpand","insertRowBefore","rowBeforeShrink","rowBeforeExpand","Snapshot","undoStack","redoStack","layer","event","data","apply","listen","pop","execute","len","open","canRedo","canUndo","close","action","RangeTree","getFirstInclude","bbox","find","first","getMasterInclude","sri","sci","getIntersects","rectRange","insert","shift","array","delete","batchDelete","rectRanges","all","union","equals","Math","max","MAX_COL","MAX_ROW","RectRange","eri","eci","w","h","each","iteratorBuilder","cb","rowFilter","ret","getRowIterator","setBegin","setEnd","setLoop","getColIterator","j","set","multiple","includes","args","contains","other","within","disjoint","intersects","coincide","EMPTY","coincideDifference","difference","addRet","dsr","dsc","der","dec","size","brink","top","bottom","right","left","point","lt","rt","lb","rb","ref","static","refs","split","Cells","getItems","clear","ignoreCorner","oldItems","effRiLength","effCiLength","oldRowItem","rowItem","firstCi","Array","undefined","slice","row","getLength","hasItems","getItemsOrNew","items","config","text","cell","getCellOrNew","TypeError","getCell","wrap","wrapCell","callback","getCellOrMergeCell","hasCell","setCell","oldValue","setCellOrNew","splice","orderValue","value","copyRowStyle","copy","cloneStyle","master","Listen","pool","Object","keys","key","removeListen","registerListen","call","message","Compare","a","b","Swap","arr","tmp","QStep","k","compare","n","m","z","log","s","exp","sd","sqrt","floor","min","t","QkSelect","findItem","equalsFn","indexOf","extend","compareNodeMinX","compareNodeMinY","bboxArea","bboxMargin","intersectionArea","createNode","childrenNodes","height","leaf","Infinity","distBBox","node","p","toBBox","destNode","child","calcBBox","multiSelect","stack","mid","ceil","RectTree","maxEntries","_maxEntries","_minEntries","_all","result","nodesToSearch","childBBox","collides","_build","_splitRoot","tmpNode","_insert","path","indexes","parent","goingUp","index","_condense","compareMinX","compareMinY","N","M","N2","N1","right2","right3","_chooseSubtree","level","targetNode","minArea","minEnlargement","area","enlargement","isNode","insertPath","_split","_adjustParentBBoxes","_chooseSplitAxis","splitIndex","_chooseSplitIndex","newNode","minOverlap","bbox1","bbox2","overlap","_allDistMargin","sort","leftBBox","rightBBox","margin","siblings","RtreeUtils"],"sourceRoot":""}